/**
 * MedicalManagementController
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest } from '../model/coreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest';
import { CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse } from '../model/coreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse';
import { CoreModelsMedicalManagementAppointmentArrivalSetArrivedRequest } from '../model/coreModelsMedicalManagementAppointmentArrivalSetArrivedRequest';
import { CoreModelsMedicalManagementAppointmentArrivalSetArrivedResponse } from '../model/coreModelsMedicalManagementAppointmentArrivalSetArrivedResponse';
import { CoreModelsMedicalManagementAppointmentCancelAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentCancelAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentCancelAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentCancelAppointmentsResponse';
import { CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest } from '../model/coreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest';
import { CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse } from '../model/coreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse';
import { CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest } from '../model/coreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest';
import { CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse } from '../model/coreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse';
import { CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest } from '../model/coreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest';
import { CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse } from '../model/coreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse';
import { CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest';
import { CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse';
import { CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse';
import { CoreModelsMedicalManagementAppointmentDeleteAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentDeleteAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentDeleteAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentDeleteAppointmentsResponse';
import { CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest } from '../model/coreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest';
import { CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse } from '../model/coreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse';
import { CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest } from '../model/coreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest';
import { CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse } from '../model/coreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse';
import { CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest';
import { CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse';
import { CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse';
import { CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest';
import { CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse';
import { CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest';
import { CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse';
import { CoreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest';
import { CoreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse';
import { CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest';
import { CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse';
import { CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest';
import { CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse } from '../model/coreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse';
import { CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest';
import { CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse';
import { CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest } from '../model/coreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest';
import { CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse } from '../model/coreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse';
import { CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest } from '../model/coreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest';
import { CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse } from '../model/coreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse';
import { CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest';
import { CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse';
import { CoreModelsMedicalManagementAppointmentLeaveSetLeavedRequest } from '../model/coreModelsMedicalManagementAppointmentLeaveSetLeavedRequest';
import { CoreModelsMedicalManagementAppointmentLeaveSetLeavedResponse } from '../model/coreModelsMedicalManagementAppointmentLeaveSetLeavedResponse';
import { CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest } from '../model/coreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest';
import { CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse } from '../model/coreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse';
import { CoreModelsMedicalManagementAppointmentPrebookAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentPrebookAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentPrebookAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentPrebookAppointmentsResponse';
import { CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest } from '../model/coreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest';
import { CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse } from '../model/coreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse';
import { CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest } from '../model/coreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest';
import { CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse } from '../model/coreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse';
import { CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest';
import { CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse';
import { CoreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest } from '../model/coreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest';
import { CoreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse } from '../model/coreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse';
import { CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest';
import { CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse } from '../model/coreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse';
import { CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest } from '../model/coreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest';
import { CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse } from '../model/coreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse';
import { CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest } from '../model/coreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest';
import { CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse } from '../model/coreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse';
import { CoreModelsMedicalManagementConsultationGetConsultationByConditionRequest } from '../model/coreModelsMedicalManagementConsultationGetConsultationByConditionRequest';
import { CoreModelsMedicalManagementConsultationGetConsultationByConditionResponse } from '../model/coreModelsMedicalManagementConsultationGetConsultationByConditionResponse';
import { CoreModelsMedicalManagementHL7MessageCreateHL7MessageRequest } from '../model/coreModelsMedicalManagementHL7MessageCreateHL7MessageRequest';
import { CoreModelsMedicalManagementHL7MessageCreateHL7MessageResponse } from '../model/coreModelsMedicalManagementHL7MessageCreateHL7MessageResponse';
import { CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest } from '../model/coreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest';
import { CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse } from '../model/coreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse';
import { CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest } from '../model/coreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest';
import { CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse } from '../model/coreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse';
import { CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest } from '../model/coreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest';
import { CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse } from '../model/coreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse';
import { CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest } from '../model/coreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest';
import { CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse } from '../model/coreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse';
import { CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest } from '../model/coreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest';
import { CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse } from '../model/coreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse';
import { CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest } from '../model/coreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest';
import { CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse } from '../model/coreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse';
import { CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest } from '../model/coreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest';
import { CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse } from '../model/coreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse';
import { CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest } from '../model/coreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest';
import { CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse } from '../model/coreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse';
import { CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest } from '../model/coreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest';
import { CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse } from '../model/coreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse';
import { CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest } from '../model/coreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest';
import { CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse } from '../model/coreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse';
import { CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest } from '../model/coreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest';
import { CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse } from '../model/coreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse';
import { CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest } from '../model/coreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest';
import { CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse } from '../model/coreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse';
import { CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest } from '../model/coreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest';
import { CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse } from '../model/coreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse';
import { CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest } from '../model/coreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest';
import { CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse } from '../model/coreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse';
import { CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest } from '../model/coreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest';
import { CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse } from '../model/coreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse';
import { CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest } from '../model/coreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest';
import { CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse } from '../model/coreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse';
import { CoreModelsMedicalManagementNEHITokensGetMOTPTokenRequest } from '../model/coreModelsMedicalManagementNEHITokensGetMOTPTokenRequest';
import { CoreModelsMedicalManagementNEHITokensGetMOTPTokenResponse } from '../model/coreModelsMedicalManagementNEHITokensGetMOTPTokenResponse';
import { CoreModelsMedicalManagementNEHITokensGetUsernameTokenRequest } from '../model/coreModelsMedicalManagementNEHITokensGetUsernameTokenRequest';
import { CoreModelsMedicalManagementNEHITokensGetUsernameTokenResponse } from '../model/coreModelsMedicalManagementNEHITokensGetUsernameTokenResponse';
import { CoreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest } from '../model/coreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest';
import { CoreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse } from '../model/coreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse';
import { CoreModelsMedicalManagementOfferCreateOrUpdateOfferRequest } from '../model/coreModelsMedicalManagementOfferCreateOrUpdateOfferRequest';
import { CoreModelsMedicalManagementOfferCreateOrUpdateOfferResponse } from '../model/coreModelsMedicalManagementOfferCreateOrUpdateOfferResponse';
import { CoreModelsMedicalManagementOfferDeleteOfferedServicesRequest } from '../model/coreModelsMedicalManagementOfferDeleteOfferedServicesRequest';
import { CoreModelsMedicalManagementOfferDeleteOfferedServicesResponse } from '../model/coreModelsMedicalManagementOfferDeleteOfferedServicesResponse';
import { CoreModelsMedicalManagementOfferDeleteOffersRequest } from '../model/coreModelsMedicalManagementOfferDeleteOffersRequest';
import { CoreModelsMedicalManagementOfferDeleteOffersResponse } from '../model/coreModelsMedicalManagementOfferDeleteOffersResponse';
import { CoreModelsMedicalManagementOfferGetOfferByConditionRequest } from '../model/coreModelsMedicalManagementOfferGetOfferByConditionRequest';
import { CoreModelsMedicalManagementOfferGetOfferByConditionResponse } from '../model/coreModelsMedicalManagementOfferGetOfferByConditionResponse';
import { CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest } from '../model/coreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest';
import { CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse } from '../model/coreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse';
import { CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest } from '../model/coreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest';
import { CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse } from '../model/coreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse';
import { CoreModelsMedicalManagementTORGetTorzsGetMasterDataRequest } from '../model/coreModelsMedicalManagementTORGetTorzsGetMasterDataRequest';
import { CoreModelsMedicalManagementTORGetTorzsGetMasterDataResponse } from '../model/coreModelsMedicalManagementTORGetTorzsGetMasterDataResponse';
import { CoreModelsWebServiceBaseEndpointListResponse } from '../model/coreModelsWebServiceBaseEndpointListResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MedicalManagementService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentAppointmentReservationPost(body?: CoreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse>;
    public appointmentAppointmentReservationPost(body?: CoreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse>>;
    public appointmentAppointmentReservationPost(body?: CoreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse>>;
    public appointmentAppointmentReservationPost(body?: CoreModelsMedicalManagementAppointmentReservationAppointmentReservationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentReservationAppointmentReservationResponse>('post',`${this.basePath}/Appointment/AppointmentReservation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentArrivalCheckArrivalDataPost(body?: CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse>;
    public appointmentArrivalCheckArrivalDataPost(body?: CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse>>;
    public appointmentArrivalCheckArrivalDataPost(body?: CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse>>;
    public appointmentArrivalCheckArrivalDataPost(body?: CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentArrivalCheckArrivalDataResponse>('post',`${this.basePath}/AppointmentArrival/CheckArrivalData`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentArrivalSetArrivedPost(body?: CoreModelsMedicalManagementAppointmentArrivalSetArrivedRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentArrivalSetArrivedResponse>;
    public appointmentArrivalSetArrivedPost(body?: CoreModelsMedicalManagementAppointmentArrivalSetArrivedRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentArrivalSetArrivedResponse>>;
    public appointmentArrivalSetArrivedPost(body?: CoreModelsMedicalManagementAppointmentArrivalSetArrivedRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentArrivalSetArrivedResponse>>;
    public appointmentArrivalSetArrivedPost(body?: CoreModelsMedicalManagementAppointmentArrivalSetArrivedRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentArrivalSetArrivedResponse>('post',`${this.basePath}/AppointmentArrival/SetArrived`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCancelAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse>;
    public appointmentCancelAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse>>;
    public appointmentCancelAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse>>;
    public appointmentCancelAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionCancelAppointmentServiceExtensionsResponse>('post',`${this.basePath}/Appointment/CancelAppointmentServiceExtensions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCancelAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCancelAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCancelAppointmentsResponse>;
    public appointmentCancelAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCancelAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCancelAppointmentsResponse>>;
    public appointmentCancelAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCancelAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCancelAppointmentsResponse>>;
    public appointmentCancelAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCancelAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCancelAppointmentsResponse>('post',`${this.basePath}/Appointment/CancelAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartCloseAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse>;
    public appointmentCartCloseAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse>>;
    public appointmentCartCloseAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse>>;
    public appointmentCartCloseAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCartCloseAppointmentCartResponse>('post',`${this.basePath}/AppointmentCart/CloseAppointmentCart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartCreateOrUpdateAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse>;
    public appointmentCartCreateOrUpdateAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse>>;
    public appointmentCartCreateOrUpdateAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse>>;
    public appointmentCartCreateOrUpdateAppointmentCartPost(body?: CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCartCreateOrUpdateAppointmentCartResponse>('post',`${this.basePath}/AppointmentCart/CreateOrUpdateAppointmentCart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartDeleteAppointmentCartsDelete(body?: CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse>;
    public appointmentCartDeleteAppointmentCartsDelete(body?: CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse>>;
    public appointmentCartDeleteAppointmentCartsDelete(body?: CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse>>;
    public appointmentCartDeleteAppointmentCartsDelete(body?: CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCartDeleteAppointmentCartsResponse>('delete',`${this.basePath}/AppointmentCart/DeleteAppointmentCarts`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartGetAppointmentCartsByConditionPost(body?: CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse>;
    public appointmentCartGetAppointmentCartsByConditionPost(body?: CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse>>;
    public appointmentCartGetAppointmentCartsByConditionPost(body?: CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse>>;
    public appointmentCartGetAppointmentCartsByConditionPost(body?: CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCartGetAppointmentCartsByConditionResponse>('post',`${this.basePath}/AppointmentCart/GetAppointmentCartsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartPrebookAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentPrebookAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentPrebookAppointmentsResponse>;
    public appointmentCartPrebookAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentPrebookAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentPrebookAppointmentsResponse>>;
    public appointmentCartPrebookAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentPrebookAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentPrebookAppointmentsResponse>>;
    public appointmentCartPrebookAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentPrebookAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentPrebookAppointmentsResponse>('post',`${this.basePath}/AppointmentCart/PrebookAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCartUnlockPrebookedAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse>;
    public appointmentCartUnlockPrebookedAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse>>;
    public appointmentCartUnlockPrebookedAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse>>;
    public appointmentCartUnlockPrebookedAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentUnlockPrebookedAppointmentsResponse>('post',`${this.basePath}/AppointmentCart/UnlockPrebookedAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCreateOrUpdateAppointmentDocumentsPost(body?: CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse>;
    public appointmentCreateOrUpdateAppointmentDocumentsPost(body?: CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse>>;
    public appointmentCreateOrUpdateAppointmentDocumentsPost(body?: CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse>>;
    public appointmentCreateOrUpdateAppointmentDocumentsPost(body?: CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentDocumentCreateOrUpdateAppointmentDocumentResponse>('post',`${this.basePath}/Appointment/CreateOrUpdateAppointmentDocuments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCreateOrUpdateAppointmentItemPost(body?: CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse>;
    public appointmentCreateOrUpdateAppointmentItemPost(body?: CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse>>;
    public appointmentCreateOrUpdateAppointmentItemPost(body?: CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse>>;
    public appointmentCreateOrUpdateAppointmentItemPost(body?: CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentItemCreateOrUpdateAppointmentItemResponse>('post',`${this.basePath}/Appointment/CreateOrUpdateAppointmentItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCreateOrUpdateAppointmentRentItemPost(body?: CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse>;
    public appointmentCreateOrUpdateAppointmentRentItemPost(body?: CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse>>;
    public appointmentCreateOrUpdateAppointmentRentItemPost(body?: CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse>>;
    public appointmentCreateOrUpdateAppointmentRentItemPost(body?: CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentRentItemCreateOrUpdateAppointmentRentItemResponse>('post',`${this.basePath}/Appointment/CreateOrUpdateAppointmentRentItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCreateOrUpdateAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse>;
    public appointmentCreateOrUpdateAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse>>;
    public appointmentCreateOrUpdateAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse>>;
    public appointmentCreateOrUpdateAppointmentServiceExtensionsPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionCreateOrUpdateAppointmentServiceExtensionsResponse>('post',`${this.basePath}/Appointment/CreateOrUpdateAppointmentServiceExtensions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentCreateOrUpdateAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse>;
    public appointmentCreateOrUpdateAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse>>;
    public appointmentCreateOrUpdateAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse>>;
    public appointmentCreateOrUpdateAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentCreateOrUpdateAppointmentsResponse>('post',`${this.basePath}/Appointment/CreateOrUpdateAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentDeleteAppointmentDocumentsDelete(body?: CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse>;
    public appointmentDeleteAppointmentDocumentsDelete(body?: CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse>>;
    public appointmentDeleteAppointmentDocumentsDelete(body?: CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse>>;
    public appointmentDeleteAppointmentDocumentsDelete(body?: CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentDocumentDeleteAppointmentDocumentResponse>('delete',`${this.basePath}/Appointment/DeleteAppointmentDocuments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentDeleteAppointmentItemDelete(body?: CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse>;
    public appointmentDeleteAppointmentItemDelete(body?: CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse>>;
    public appointmentDeleteAppointmentItemDelete(body?: CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse>>;
    public appointmentDeleteAppointmentItemDelete(body?: CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentItemDeleteDeleteAppointmentItemResponse>('delete',`${this.basePath}/Appointment/DeleteAppointmentItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentDeleteAppointmentRentItemDelete(body?: CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse>;
    public appointmentDeleteAppointmentRentItemDelete(body?: CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse>>;
    public appointmentDeleteAppointmentRentItemDelete(body?: CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse>>;
    public appointmentDeleteAppointmentRentItemDelete(body?: CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentRentItemDeleteDeleteAppointmentRentItemResponse>('delete',`${this.basePath}/Appointment/DeleteAppointmentRentItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentDeleteAppointmentServiceExtensionsDelete(body?: CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse>;
    public appointmentDeleteAppointmentServiceExtensionsDelete(body?: CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse>>;
    public appointmentDeleteAppointmentServiceExtensionsDelete(body?: CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse>>;
    public appointmentDeleteAppointmentServiceExtensionsDelete(body?: CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionDeleteAppointmentServiceExtensionsResponse>('delete',`${this.basePath}/Appointment/DeleteAppointmentServiceExtensions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentDeleteAppointmentsDelete(body?: CoreModelsMedicalManagementAppointmentDeleteAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentDeleteAppointmentsResponse>;
    public appointmentDeleteAppointmentsDelete(body?: CoreModelsMedicalManagementAppointmentDeleteAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentDeleteAppointmentsResponse>>;
    public appointmentDeleteAppointmentsDelete(body?: CoreModelsMedicalManagementAppointmentDeleteAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentDeleteAppointmentsResponse>>;
    public appointmentDeleteAppointmentsDelete(body?: CoreModelsMedicalManagementAppointmentDeleteAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentDeleteAppointmentsResponse>('delete',`${this.basePath}/Appointment/DeleteAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentFindAvailableAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse>;
    public appointmentFindAvailableAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse>>;
    public appointmentFindAvailableAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse>>;
    public appointmentFindAvailableAppointmentsPost(body?: CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentFindAvailableAppointmentsResponse>('post',`${this.basePath}/Appointment/FindAvailableAppointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGenerateAppointmentCartsByPatientListPost(body?: CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse>;
    public appointmentGenerateAppointmentCartsByPatientListPost(body?: CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse>>;
    public appointmentGenerateAppointmentCartsByPatientListPost(body?: CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse>>;
    public appointmentGenerateAppointmentCartsByPatientListPost(body?: CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementPatientAppointmentGenerateAppointmentCartsByPatientListResponse>('post',`${this.basePath}/Appointment/GenerateAppointmentCartsByPatientList`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentCCInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse>;
    public appointmentGetAppointmentCCInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse>>;
    public appointmentGetAppointmentCCInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse>>;
    public appointmentGetAppointmentCCInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetAppointmentCCInitPageResponse>('post',`${this.basePath}/Appointment/GetAppointmentCCInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentCountByClinicPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse>;
    public appointmentGetAppointmentCountByClinicPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse>>;
    public appointmentGetAppointmentCountByClinicPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse>>;
    public appointmentGetAppointmentCountByClinicPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetAppointmentCountByClinicResponse>('post',`${this.basePath}/Appointment/GetAppointmentCountByClinic`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentDocumentByConditionPost(body?: CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse>;
    public appointmentGetAppointmentDocumentByConditionPost(body?: CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse>>;
    public appointmentGetAppointmentDocumentByConditionPost(body?: CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse>>;
    public appointmentGetAppointmentDocumentByConditionPost(body?: CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentDocumentGetAppointmentDocumentByConditionResponse>('post',`${this.basePath}/Appointment/GetAppointmentDocumentByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse>;
    public appointmentGetAppointmentInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse>>;
    public appointmentGetAppointmentInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse>>;
    public appointmentGetAppointmentInitPagePost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetAppointmentInitPageResponse>('post',`${this.basePath}/Appointment/GetAppointmentInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse>;
    public appointmentGetAppointmentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse>>;
    public appointmentGetAppointmentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse>>;
    public appointmentGetAppointmentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentItemGetAppointmentItemByConditionResponse>('post',`${this.basePath}/Appointment/GetAppointmentItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentRentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse>;
    public appointmentGetAppointmentRentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse>>;
    public appointmentGetAppointmentRentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse>>;
    public appointmentGetAppointmentRentItemByConditionPost(body?: CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentRentItemGetAppointmentRentItemByConditionResponse>('post',`${this.basePath}/Appointment/GetAppointmentRentItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse>;
    public appointmentGetAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse>>;
    public appointmentGetAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse>>;
    public appointmentGetAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionGetAppointmentServiceExtensionsByConditionResponse>('post',`${this.basePath}/Appointment/GetAppointmentServiceExtensionsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentsByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse>;
    public appointmentGetAppointmentsByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse>>;
    public appointmentGetAppointmentsByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse>>;
    public appointmentGetAppointmentsByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetAppointmentsByConditionResponse>('post',`${this.basePath}/Appointment/GetAppointmentsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetAppointmentsByConditionWithPatientDataCheckPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse>;
    public appointmentGetAppointmentsByConditionWithPatientDataCheckPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse>>;
    public appointmentGetAppointmentsByConditionWithPatientDataCheckPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse>>;
    public appointmentGetAppointmentsByConditionWithPatientDataCheckPost(body?: CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetAppointmentsWithDataCheckResponse>('post',`${this.basePath}/Appointment/GetAppointmentsByConditionWithPatientDataCheck`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetDebtInformationPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse>;
    public appointmentGetDebtInformationPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse>>;
    public appointmentGetDebtInformationPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse>>;
    public appointmentGetDebtInformationPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionGetDebtInformationResponse>('post',`${this.basePath}/Appointment/GetDebtInformation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetLatestMedicalEmployeeByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse>;
    public appointmentGetLatestMedicalEmployeeByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse>>;
    public appointmentGetLatestMedicalEmployeeByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse>>;
    public appointmentGetLatestMedicalEmployeeByConditionPost(body?: CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentGetLatestMedicalEmployeeByConditionResponse>('post',`${this.basePath}/Appointment/GetLatestMedicalEmployeeByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetNotCompletedAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse>;
    public appointmentGetNotCompletedAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse>>;
    public appointmentGetNotCompletedAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse>>;
    public appointmentGetNotCompletedAppointmentServiceExtensionsByConditionPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionGetNotCompletedAppointmentServiceExtensionsByConditionResponse>('post',`${this.basePath}/Appointment/GetNotCompletedAppointmentServiceExtensionsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentGetPatientAppointmentHistoryPost(body?: CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse>;
    public appointmentGetPatientAppointmentHistoryPost(body?: CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse>>;
    public appointmentGetPatientAppointmentHistoryPost(body?: CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse>>;
    public appointmentGetPatientAppointmentHistoryPost(body?: CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementPatientAppointmentHistoryGetPatientAppointmentHistoryResponse>('post',`${this.basePath}/Appointment/GetPatientAppointmentHistory`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentMultipleReservationAppointmentMultipleReservationAnonPost(body?: CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse>;
    public appointmentMultipleReservationAppointmentMultipleReservationAnonPost(body?: CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse>>;
    public appointmentMultipleReservationAppointmentMultipleReservationAnonPost(body?: CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse>>;
    public appointmentMultipleReservationAppointmentMultipleReservationAnonPost(body?: CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentMultipleReservationAppointmentMultipleReservationAnonResponse>('post',`${this.basePath}/AppointmentMultipleReservation/AppointmentMultipleReservationAnon`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentSetAppointmentCancellationJudgementPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse>;
    public appointmentSetAppointmentCancellationJudgementPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse>>;
    public appointmentSetAppointmentCancellationJudgementPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse>>;
    public appointmentSetAppointmentCancellationJudgementPost(body?: CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentServiceExtensionSetAppointmentCancellationJudgementResponse>('post',`${this.basePath}/Appointment/SetAppointmentCancellationJudgement`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentSetLeavedPost(body?: CoreModelsMedicalManagementAppointmentLeaveSetLeavedRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAppointmentLeaveSetLeavedResponse>;
    public appointmentSetLeavedPost(body?: CoreModelsMedicalManagementAppointmentLeaveSetLeavedRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAppointmentLeaveSetLeavedResponse>>;
    public appointmentSetLeavedPost(body?: CoreModelsMedicalManagementAppointmentLeaveSetLeavedRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAppointmentLeaveSetLeavedResponse>>;
    public appointmentSetLeavedPost(body?: CoreModelsMedicalManagementAppointmentLeaveSetLeavedRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAppointmentLeaveSetLeavedResponse>('post',`${this.basePath}/Appointment/SetLeaved`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse>>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse>>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementAuditLogGetMedicalManagementAuditLogsByConditionResponse>('post',`${this.basePath}/AuditLog/GetAuditLogsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public consultationGetConsultationByConditionPost(body?: CoreModelsMedicalManagementConsultationGetConsultationByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementConsultationGetConsultationByConditionResponse>;
    public consultationGetConsultationByConditionPost(body?: CoreModelsMedicalManagementConsultationGetConsultationByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementConsultationGetConsultationByConditionResponse>>;
    public consultationGetConsultationByConditionPost(body?: CoreModelsMedicalManagementConsultationGetConsultationByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementConsultationGetConsultationByConditionResponse>>;
    public consultationGetConsultationByConditionPost(body?: CoreModelsMedicalManagementConsultationGetConsultationByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementConsultationGetConsultationByConditionResponse>('post',`${this.basePath}/Consultation/GetConsultationByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eHRAddOrUpdateEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse>;
    public eHRAddOrUpdateEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse>>;
    public eHRAddOrUpdateEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse>>;
    public eHRAddOrUpdateEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEHRAddOrUpdateDocumentAddOrUpdateEHRDocumentResponse>('post',`${this.basePath}/EHR/AddOrUpdateEHRDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eHRDeleteEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse>;
    public eHRDeleteEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse>>;
    public eHRDeleteEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse>>;
    public eHRDeleteEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEHRDeleteDocumentDeleteEHRDocumentResponse>('post',`${this.basePath}/EHR/DeleteEHRDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eHRGetEHRDocumentListPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse>;
    public eHRGetEHRDocumentListPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse>>;
    public eHRGetEHRDocumentListPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse>>;
    public eHRGetEHRDocumentListPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEHRGetDocumentListGetEHRDocumentListResponse>('post',`${this.basePath}/EHR/GetEHRDocumentList`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eHRGetEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse>;
    public eHRGetEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse>>;
    public eHRGetEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse>>;
    public eHRGetEHRDocumentPost(body?: CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEHRGetDocumentGetEHRDocumentResponse>('post',`${this.basePath}/EHR/GetEHRDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATAddEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse>;
    public eKATAddEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse>>;
    public eKATAddEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse>>;
    public eKATAddEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATAddEventEntryAddEventEntryResponse>('post',`${this.basePath}/EKAT/AddEventEntry`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATCovidOTPost(body?: CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse>;
    public eKATCovidOTPost(body?: CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse>>;
    public eKATCovidOTPost(body?: CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse>>;
    public eKATCovidOTPost(body?: CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATEKATCovidOTEKATCovidOTResponse>('post',`${this.basePath}/EKAT/CovidOT`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATDeleteEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse>;
    public eKATDeleteEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse>>;
    public eKATDeleteEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse>>;
    public eKATDeleteEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATDeleteEventEntryDeleteEventEntryResponse>('post',`${this.basePath}/EKAT/DeleteEventEntry`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATGetEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse>;
    public eKATGetEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse>>;
    public eKATGetEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse>>;
    public eKATGetEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATGetEventEntryGetEventEntryResponse>('post',`${this.basePath}/EKAT/GetEventEntry`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATGetEventsByPatientPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse>;
    public eKATGetEventsByPatientPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse>>;
    public eKATGetEventsByPatientPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse>>;
    public eKATGetEventsByPatientPost(body?: CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATGetEventsByPatientGetEventsByPatientResponse>('post',`${this.basePath}/EKAT/GetEventsByPatient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eKATUpdateEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse>;
    public eKATUpdateEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse>>;
    public eKATUpdateEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse>>;
    public eKATUpdateEventEntryPost(body?: CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEKATUpdateEventEntryUpdateEventEntryResponse>('post',`${this.basePath}/EKAT/UpdateEventEntry`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ePRODeleteEPRODataPost(body?: CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse>;
    public ePRODeleteEPRODataPost(body?: CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse>>;
    public ePRODeleteEPRODataPost(body?: CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse>>;
    public ePRODeleteEPRODataPost(body?: CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEPRODeleteDataDeleteEPRODataResponse>('post',`${this.basePath}/EPRO/DeleteEPROData`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ePROEPROSearchDataPost(body?: CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse>;
    public ePROEPROSearchDataPost(body?: CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse>>;
    public ePROEPROSearchDataPost(body?: CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse>>;
    public ePROEPROSearchDataPost(body?: CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIEPROSearchDataEPROSearchDataResponse>('post',`${this.basePath}/EPRO/EPROSearchData`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eRECDeletePrescriptionFromNEHIPost(body?: CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse>;
    public eRECDeletePrescriptionFromNEHIPost(body?: CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse>>;
    public eRECDeletePrescriptionFromNEHIPost(body?: CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse>>;
    public eRECDeletePrescriptionFromNEHIPost(body?: CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIERECDeletePrescriptionDeletePrescriptionFromNEHIResponse>('post',`${this.basePath}/EREC/DeletePrescriptionFromNEHI`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eRECSearchNEHIPrescriptionByPatientPost(body?: CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse>;
    public eRECSearchNEHIPrescriptionByPatientPost(body?: CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse>>;
    public eRECSearchNEHIPrescriptionByPatientPost(body?: CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse>>;
    public eRECSearchNEHIPrescriptionByPatientPost(body?: CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIERECSearchPrescriptionByPatientSearchNEHIPrescriptionByPatientResponse>('post',`${this.basePath}/EREC/SearchNEHIPrescriptionByPatient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hL7CreateHL7MessagePost(body?: CoreModelsMedicalManagementHL7MessageCreateHL7MessageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementHL7MessageCreateHL7MessageResponse>;
    public hL7CreateHL7MessagePost(body?: CoreModelsMedicalManagementHL7MessageCreateHL7MessageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementHL7MessageCreateHL7MessageResponse>>;
    public hL7CreateHL7MessagePost(body?: CoreModelsMedicalManagementHL7MessageCreateHL7MessageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementHL7MessageCreateHL7MessageResponse>>;
    public hL7CreateHL7MessagePost(body?: CoreModelsMedicalManagementHL7MessageCreateHL7MessageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementHL7MessageCreateHL7MessageResponse>('post',`${this.basePath}/HL7/CreateHL7Message`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public itemAvailabilityGetItemAvailabilityPost(body?: CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse>;
    public itemAvailabilityGetItemAvailabilityPost(body?: CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse>>;
    public itemAvailabilityGetItemAvailabilityPost(body?: CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse>>;
    public itemAvailabilityGetItemAvailabilityPost(body?: CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementItemAvailabilityGetItemAvailabilityResponse>('post',`${this.basePath}/ItemAvailability/GetItemAvailability`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param T 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalManagementGetEnumGet(T?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public medicalManagementGetEnumGet(T?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public medicalManagementGetEnumGet(T?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public medicalManagementGetEnumGet(T?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (T !== undefined && T !== null) {
            queryParameters = queryParameters.set('T', <any>T);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<any>>('get',`${this.basePath}/MedicalManagement/GetEnum`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalManagementPingGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public medicalManagementPingGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public medicalManagementPingGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public medicalManagementPingGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MedicalManagement/Ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nEHIMessageGetNEHIMessageByConditionPost(body?: CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse>;
    public nEHIMessageGetNEHIMessageByConditionPost(body?: CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse>>;
    public nEHIMessageGetNEHIMessageByConditionPost(body?: CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse>>;
    public nEHIMessageGetNEHIMessageByConditionPost(body?: CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHIMessageGetNEHIMessageByConditionResponse>('post',`${this.basePath}/NEHIMessage/GetNEHIMessageByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nEHITokenGetMOTPTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetMOTPTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHITokensGetMOTPTokenResponse>;
    public nEHITokenGetMOTPTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetMOTPTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHITokensGetMOTPTokenResponse>>;
    public nEHITokenGetMOTPTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetMOTPTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHITokensGetMOTPTokenResponse>>;
    public nEHITokenGetMOTPTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetMOTPTokenRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHITokensGetMOTPTokenResponse>('post',`${this.basePath}/NEHIToken/GetMOTPToken`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nEHITokenGetUsernameTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetUsernameTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementNEHITokensGetUsernameTokenResponse>;
    public nEHITokenGetUsernameTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetUsernameTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementNEHITokensGetUsernameTokenResponse>>;
    public nEHITokenGetUsernameTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetUsernameTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementNEHITokensGetUsernameTokenResponse>>;
    public nEHITokenGetUsernameTokenPost(body?: CoreModelsMedicalManagementNEHITokensGetUsernameTokenRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementNEHITokensGetUsernameTokenResponse>('post',`${this.basePath}/NEHIToken/GetUsernameToken`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offerCreateInvoiceFromOfferPost(body?: CoreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse>;
    public offerCreateInvoiceFromOfferPost(body?: CoreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse>>;
    public offerCreateInvoiceFromOfferPost(body?: CoreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse>>;
    public offerCreateInvoiceFromOfferPost(body?: CoreModelsMedicalManagementOfferCreateInvoiceFromOfferRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementOfferCreateInvoiceFromOfferResponse>('post',`${this.basePath}/Offer/CreateInvoiceFromOffer`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offerCreateOrUpdateOfferPost(body?: CoreModelsMedicalManagementOfferCreateOrUpdateOfferRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementOfferCreateOrUpdateOfferResponse>;
    public offerCreateOrUpdateOfferPost(body?: CoreModelsMedicalManagementOfferCreateOrUpdateOfferRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementOfferCreateOrUpdateOfferResponse>>;
    public offerCreateOrUpdateOfferPost(body?: CoreModelsMedicalManagementOfferCreateOrUpdateOfferRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementOfferCreateOrUpdateOfferResponse>>;
    public offerCreateOrUpdateOfferPost(body?: CoreModelsMedicalManagementOfferCreateOrUpdateOfferRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementOfferCreateOrUpdateOfferResponse>('post',`${this.basePath}/Offer/CreateOrUpdateOffer`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offerDeleteOfferedServicesDelete(body?: CoreModelsMedicalManagementOfferDeleteOfferedServicesRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementOfferDeleteOfferedServicesResponse>;
    public offerDeleteOfferedServicesDelete(body?: CoreModelsMedicalManagementOfferDeleteOfferedServicesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementOfferDeleteOfferedServicesResponse>>;
    public offerDeleteOfferedServicesDelete(body?: CoreModelsMedicalManagementOfferDeleteOfferedServicesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementOfferDeleteOfferedServicesResponse>>;
    public offerDeleteOfferedServicesDelete(body?: CoreModelsMedicalManagementOfferDeleteOfferedServicesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementOfferDeleteOfferedServicesResponse>('delete',`${this.basePath}/Offer/DeleteOfferedServices`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offerDeleteOffersDelete(body?: CoreModelsMedicalManagementOfferDeleteOffersRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementOfferDeleteOffersResponse>;
    public offerDeleteOffersDelete(body?: CoreModelsMedicalManagementOfferDeleteOffersRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementOfferDeleteOffersResponse>>;
    public offerDeleteOffersDelete(body?: CoreModelsMedicalManagementOfferDeleteOffersRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementOfferDeleteOffersResponse>>;
    public offerDeleteOffersDelete(body?: CoreModelsMedicalManagementOfferDeleteOffersRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementOfferDeleteOffersResponse>('delete',`${this.basePath}/Offer/DeleteOffers`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offerGetOfferByConditionPost(body?: CoreModelsMedicalManagementOfferGetOfferByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementOfferGetOfferByConditionResponse>;
    public offerGetOfferByConditionPost(body?: CoreModelsMedicalManagementOfferGetOfferByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementOfferGetOfferByConditionResponse>>;
    public offerGetOfferByConditionPost(body?: CoreModelsMedicalManagementOfferGetOfferByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementOfferGetOfferByConditionResponse>>;
    public offerGetOfferByConditionPost(body?: CoreModelsMedicalManagementOfferGetOfferByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementOfferGetOfferByConditionResponse>('post',`${this.basePath}/Offer/GetOfferByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tORGetMasterDataPost(body?: CoreModelsMedicalManagementTORGetTorzsGetMasterDataRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMedicalManagementTORGetTorzsGetMasterDataResponse>;
    public tORGetMasterDataPost(body?: CoreModelsMedicalManagementTORGetTorzsGetMasterDataRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMedicalManagementTORGetTorzsGetMasterDataResponse>>;
    public tORGetMasterDataPost(body?: CoreModelsMedicalManagementTORGetTorzsGetMasterDataRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMedicalManagementTORGetTorzsGetMasterDataResponse>>;
    public tORGetMasterDataPost(body?: CoreModelsMedicalManagementTORGetTorzsGetMasterDataRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMedicalManagementTORGetTorzsGetMasterDataResponse>('post',`${this.basePath}/TOR/GetMasterData`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webServiceInfoGetEndpointListGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CoreModelsWebServiceBaseEndpointListResponse>>;
    public webServiceInfoGetEndpointListGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CoreModelsWebServiceBaseEndpointListResponse>>('get',`${this.basePath}/WebServiceInfo/GetEndpointList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
