/**
 * MasterDataManagementController
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CoreModelsMasterDataAdminExportMasterDataEndpointsRequest } from '../model/coreModelsMasterDataAdminExportMasterDataEndpointsRequest';
import { CoreModelsMasterDataAdminExportMasterDataEndpointsResponse } from '../model/coreModelsMasterDataAdminExportMasterDataEndpointsResponse';
import { CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest } from '../model/coreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest';
import { CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse } from '../model/coreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse';
import { CoreModelsMasterDataBisnodeGetQuickSearchByConditionRequest } from '../model/coreModelsMasterDataBisnodeGetQuickSearchByConditionRequest';
import { CoreModelsMasterDataBisnodeGetQuickSearchByConditionResponse } from '../model/coreModelsMasterDataBisnodeGetQuickSearchByConditionResponse';
import { CoreModelsMasterDataClinicCreateOrUpdateClinicRequest } from '../model/coreModelsMasterDataClinicCreateOrUpdateClinicRequest';
import { CoreModelsMasterDataClinicCreateOrUpdateClinicResponse } from '../model/coreModelsMasterDataClinicCreateOrUpdateClinicResponse';
import { CoreModelsMasterDataClinicDeleteDeleteClinicRequest } from '../model/coreModelsMasterDataClinicDeleteDeleteClinicRequest';
import { CoreModelsMasterDataClinicDeleteDeleteClinicResponse } from '../model/coreModelsMasterDataClinicDeleteDeleteClinicResponse';
import { CoreModelsMasterDataClinicGetClinicByConditionRequest } from '../model/coreModelsMasterDataClinicGetClinicByConditionRequest';
import { CoreModelsMasterDataClinicGetClinicByConditionResponse } from '../model/coreModelsMasterDataClinicGetClinicByConditionResponse';
import { CoreModelsMasterDataClinicInitPageGetClinicInitPageRequest } from '../model/coreModelsMasterDataClinicInitPageGetClinicInitPageRequest';
import { CoreModelsMasterDataClinicInitPageGetClinicInitPageResponse } from '../model/coreModelsMasterDataClinicInitPageGetClinicInitPageResponse';
import { CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest } from '../model/coreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest';
import { CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse } from '../model/coreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse';
import { CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest } from '../model/coreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest';
import { CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse } from '../model/coreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse';
import { CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest } from '../model/coreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest';
import { CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse } from '../model/coreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse';
import { CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest } from '../model/coreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest';
import { CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse } from '../model/coreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse';
import { CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest } from '../model/coreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest';
import { CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse } from '../model/coreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse';
import { CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest } from '../model/coreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest';
import { CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse } from '../model/coreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse';
import { CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest } from '../model/coreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest';
import { CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse } from '../model/coreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse';
import { CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest } from '../model/coreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest';
import { CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse } from '../model/coreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse';
import { CoreModelsMasterDataCompanyGetCompanySiteByConditionRequest } from '../model/coreModelsMasterDataCompanyGetCompanySiteByConditionRequest';
import { CoreModelsMasterDataCompanyGetCompanySiteByConditionResponse } from '../model/coreModelsMasterDataCompanyGetCompanySiteByConditionResponse';
import { CoreModelsMasterDataConfigurationGetConfigurationsByConditionRequest } from '../model/coreModelsMasterDataConfigurationGetConfigurationsByConditionRequest';
import { CoreModelsMasterDataConfigurationGetConfigurationsByConditionResponse } from '../model/coreModelsMasterDataConfigurationGetConfigurationsByConditionResponse';
import { CoreModelsMasterDataConfigurationUpdateConfigurationRequest } from '../model/coreModelsMasterDataConfigurationUpdateConfigurationRequest';
import { CoreModelsMasterDataConfigurationUpdateConfigurationResponse } from '../model/coreModelsMasterDataConfigurationUpdateConfigurationResponse';
import { CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest } from '../model/coreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest';
import { CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse } from '../model/coreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse';
import { CoreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest } from '../model/coreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest';
import { CoreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse } from '../model/coreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse';
import { CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest } from '../model/coreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest';
import { CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse } from '../model/coreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse';
import { CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest } from '../model/coreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest';
import { CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse } from '../model/coreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse';
import { CoreModelsMasterDataDocumentCreateOrUpdateDocumentRequest } from '../model/coreModelsMasterDataDocumentCreateOrUpdateDocumentRequest';
import { CoreModelsMasterDataDocumentCreateOrUpdateDocumentResponse } from '../model/coreModelsMasterDataDocumentCreateOrUpdateDocumentResponse';
import { CoreModelsMasterDataDocumentDeleteDeleteDocumentRequest } from '../model/coreModelsMasterDataDocumentDeleteDeleteDocumentRequest';
import { CoreModelsMasterDataDocumentDeleteDeleteDocumentResponse } from '../model/coreModelsMasterDataDocumentDeleteDeleteDocumentResponse';
import { CoreModelsMasterDataDocumentGetDocumentsByConditionRequest } from '../model/coreModelsMasterDataDocumentGetDocumentsByConditionRequest';
import { CoreModelsMasterDataDocumentGetDocumentsByConditionResponse } from '../model/coreModelsMasterDataDocumentGetDocumentsByConditionResponse';
import { CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest } from '../model/coreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest';
import { CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse } from '../model/coreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse';
import { CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest } from '../model/coreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest';
import { CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse } from '../model/coreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse';
import { CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest } from '../model/coreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest';
import { CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse } from '../model/coreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse';
import { CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest } from '../model/coreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest';
import { CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse } from '../model/coreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse';
import { CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest } from '../model/coreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest';
import { CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse } from '../model/coreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse';
import { CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest } from '../model/coreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest';
import { CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse } from '../model/coreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse';
import { CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest } from '../model/coreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest';
import { CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse } from '../model/coreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse';
import { CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest } from '../model/coreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest';
import { CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse } from '../model/coreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse';
import { CoreModelsMasterDataExposureCreateOrUpdateExposureRequest } from '../model/coreModelsMasterDataExposureCreateOrUpdateExposureRequest';
import { CoreModelsMasterDataExposureCreateOrUpdateExposureResponse } from '../model/coreModelsMasterDataExposureCreateOrUpdateExposureResponse';
import { CoreModelsMasterDataExposureDeleteDeleteExposureRequest } from '../model/coreModelsMasterDataExposureDeleteDeleteExposureRequest';
import { CoreModelsMasterDataExposureDeleteDeleteExposureResponse } from '../model/coreModelsMasterDataExposureDeleteDeleteExposureResponse';
import { CoreModelsMasterDataExposureGetExposureByConditionRequest } from '../model/coreModelsMasterDataExposureGetExposureByConditionRequest';
import { CoreModelsMasterDataExposureGetExposureByConditionResponse } from '../model/coreModelsMasterDataExposureGetExposureByConditionResponse';
import { CoreModelsMasterDataExposureInitPageExposureInitPageRequest } from '../model/coreModelsMasterDataExposureInitPageExposureInitPageRequest';
import { CoreModelsMasterDataExposureInitPageExposureInitPageResponse } from '../model/coreModelsMasterDataExposureInitPageExposureInitPageResponse';
import { CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest } from '../model/coreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest';
import { CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse } from '../model/coreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse';
import { CoreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest } from '../model/coreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest';
import { CoreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse } from '../model/coreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse';
import { CoreModelsMasterDataExposureItemGetExposureItemByConditionRequest } from '../model/coreModelsMasterDataExposureItemGetExposureItemByConditionRequest';
import { CoreModelsMasterDataExposureItemGetExposureItemByConditionResponse } from '../model/coreModelsMasterDataExposureItemGetExposureItemByConditionResponse';
import { CoreModelsMasterDataHSCOCreateOrUpdateHSCORequest } from '../model/coreModelsMasterDataHSCOCreateOrUpdateHSCORequest';
import { CoreModelsMasterDataHSCOCreateOrUpdateHSCOResponse } from '../model/coreModelsMasterDataHSCOCreateOrUpdateHSCOResponse';
import { CoreModelsMasterDataHSCODeleteDeleteHSCORequest } from '../model/coreModelsMasterDataHSCODeleteDeleteHSCORequest';
import { CoreModelsMasterDataHSCODeleteDeleteHSCOResponse } from '../model/coreModelsMasterDataHSCODeleteDeleteHSCOResponse';
import { CoreModelsMasterDataHSCOGetHSCOByConditionRequest } from '../model/coreModelsMasterDataHSCOGetHSCOByConditionRequest';
import { CoreModelsMasterDataHSCOGetHSCOByConditionResponse } from '../model/coreModelsMasterDataHSCOGetHSCOByConditionResponse';
import { CoreModelsMasterDataHSCOGetHSCOTreeListRequest } from '../model/coreModelsMasterDataHSCOGetHSCOTreeListRequest';
import { CoreModelsMasterDataHSCOGetHSCOTreeListResponse } from '../model/coreModelsMasterDataHSCOGetHSCOTreeListResponse';
import { CoreModelsMasterDataItemCreateOrUpdateItemRequest } from '../model/coreModelsMasterDataItemCreateOrUpdateItemRequest';
import { CoreModelsMasterDataItemCreateOrUpdateItemResponse } from '../model/coreModelsMasterDataItemCreateOrUpdateItemResponse';
import { CoreModelsMasterDataItemDeleteDeleteItemRequest } from '../model/coreModelsMasterDataItemDeleteDeleteItemRequest';
import { CoreModelsMasterDataItemDeleteDeleteItemResponse } from '../model/coreModelsMasterDataItemDeleteDeleteItemResponse';
import { CoreModelsMasterDataItemGetItemByConditionRequest } from '../model/coreModelsMasterDataItemGetItemByConditionRequest';
import { CoreModelsMasterDataItemGetItemByConditionResponse } from '../model/coreModelsMasterDataItemGetItemByConditionResponse';
import { CoreModelsMasterDataItemInitPageGetItemInitPageRequest } from '../model/coreModelsMasterDataItemInitPageGetItemInitPageRequest';
import { CoreModelsMasterDataItemInitPageGetItemInitPageResponse } from '../model/coreModelsMasterDataItemInitPageGetItemInitPageResponse';
import { CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest } from '../model/coreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest';
import { CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse } from '../model/coreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse';
import { CoreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest } from '../model/coreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest';
import { CoreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse } from '../model/coreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse';
import { CoreModelsMasterDataJobTitleGetJobTitleByConditionResponse } from '../model/coreModelsMasterDataJobTitleGetJobTitleByConditionResponse';
import { CoreModelsMasterDataJobTitleGetJobtitleByConditionRequest } from '../model/coreModelsMasterDataJobTitleGetJobtitleByConditionRequest';
import { CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest } from '../model/coreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest';
import { CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse } from '../model/coreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse';
import { CoreModelsMasterDataLabCreateOrUpdateLabRequest } from '../model/coreModelsMasterDataLabCreateOrUpdateLabRequest';
import { CoreModelsMasterDataLabCreateOrUpdateLabResponse } from '../model/coreModelsMasterDataLabCreateOrUpdateLabResponse';
import { CoreModelsMasterDataLabDeleteLabRequest } from '../model/coreModelsMasterDataLabDeleteLabRequest';
import { CoreModelsMasterDataLabDeleteLabResponse } from '../model/coreModelsMasterDataLabDeleteLabResponse';
import { CoreModelsMasterDataLabGetLabInitPageRequest } from '../model/coreModelsMasterDataLabGetLabInitPageRequest';
import { CoreModelsMasterDataLabGetLabInitPageResponse } from '../model/coreModelsMasterDataLabGetLabInitPageResponse';
import { CoreModelsMasterDataLabGetLabServicesByConditionRequest } from '../model/coreModelsMasterDataLabGetLabServicesByConditionRequest';
import { CoreModelsMasterDataLabGetLabServicesByConditionResponse } from '../model/coreModelsMasterDataLabGetLabServicesByConditionResponse';
import { CoreModelsMasterDataLabGetLabsByConditionRequest } from '../model/coreModelsMasterDataLabGetLabsByConditionRequest';
import { CoreModelsMasterDataLabGetLabsByConditionResponse } from '../model/coreModelsMasterDataLabGetLabsByConditionResponse';
import { CoreModelsMasterDataMacroCreateOrUpdateMacroRequest } from '../model/coreModelsMasterDataMacroCreateOrUpdateMacroRequest';
import { CoreModelsMasterDataMacroCreateOrUpdateMacroResponse } from '../model/coreModelsMasterDataMacroCreateOrUpdateMacroResponse';
import { CoreModelsMasterDataMacroDeleteDeleteMacroRequest } from '../model/coreModelsMasterDataMacroDeleteDeleteMacroRequest';
import { CoreModelsMasterDataMacroDeleteDeleteMacroResponse } from '../model/coreModelsMasterDataMacroDeleteDeleteMacroResponse';
import { CoreModelsMasterDataMacroGetMacrosByConditionRequest } from '../model/coreModelsMasterDataMacroGetMacrosByConditionRequest';
import { CoreModelsMasterDataMacroGetMacrosByConditionResponse } from '../model/coreModelsMasterDataMacroGetMacrosByConditionResponse';
import { CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest } from '../model/coreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest';
import { CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse } from '../model/coreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse';
import { CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest } from '../model/coreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest';
import { CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse } from '../model/coreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse';
import { CoreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest } from '../model/coreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest';
import { CoreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse } from '../model/coreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse';
import { CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest } from '../model/coreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest';
import { CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse } from '../model/coreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse';
import { CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest } from '../model/coreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest';
import { CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse } from '../model/coreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse';
import { CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest } from '../model/coreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest';
import { CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse } from '../model/coreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse';
import { CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest } from '../model/coreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest';
import { CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse } from '../model/coreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse';
import { CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest } from '../model/coreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest';
import { CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse } from '../model/coreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse';
import { CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest } from '../model/coreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest';
import { CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse } from '../model/coreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse';
import { CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest } from '../model/coreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest';
import { CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse } from '../model/coreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse';
import { CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest } from '../model/coreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest';
import { CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse } from '../model/coreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse';
import { CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest } from '../model/coreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest';
import { CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse } from '../model/coreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse';
import { CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest } from '../model/coreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest';
import { CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse } from '../model/coreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse';
import { CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest } from '../model/coreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest';
import { CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse } from '../model/coreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse';
import { CoreModelsMasterDataPartnerCreateOrUpdatePartnerRequest } from '../model/coreModelsMasterDataPartnerCreateOrUpdatePartnerRequest';
import { CoreModelsMasterDataPartnerCreateOrUpdatePartnerResponse } from '../model/coreModelsMasterDataPartnerCreateOrUpdatePartnerResponse';
import { CoreModelsMasterDataPartnerDeletePartnerRequest } from '../model/coreModelsMasterDataPartnerDeletePartnerRequest';
import { CoreModelsMasterDataPartnerDeletePartnerResponse } from '../model/coreModelsMasterDataPartnerDeletePartnerResponse';
import { CoreModelsMasterDataPartnerGetPartnerByConditionRequest } from '../model/coreModelsMasterDataPartnerGetPartnerByConditionRequest';
import { CoreModelsMasterDataPartnerGetPartnerByConditionResponse } from '../model/coreModelsMasterDataPartnerGetPartnerByConditionResponse';
import { CoreModelsMasterDataPartnerPartnerInitPageRequest } from '../model/coreModelsMasterDataPartnerPartnerInitPageRequest';
import { CoreModelsMasterDataPartnerPartnerInitPageResponse } from '../model/coreModelsMasterDataPartnerPartnerInitPageResponse';
import { CoreModelsMasterDataPatientCreateOrUpdatePatientRequest } from '../model/coreModelsMasterDataPatientCreateOrUpdatePatientRequest';
import { CoreModelsMasterDataPatientCreateOrUpdatePatientResponse } from '../model/coreModelsMasterDataPatientCreateOrUpdatePatientResponse';
import { CoreModelsMasterDataPatientDeleteDeletePatientRequest } from '../model/coreModelsMasterDataPatientDeleteDeletePatientRequest';
import { CoreModelsMasterDataPatientDeleteDeletePatientResponse } from '../model/coreModelsMasterDataPatientDeleteDeletePatientResponse';
import { CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest } from '../model/coreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest';
import { CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse } from '../model/coreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse';
import { CoreModelsMasterDataPatientGetPatientInitPageRequest } from '../model/coreModelsMasterDataPatientGetPatientInitPageRequest';
import { CoreModelsMasterDataPatientGetPatientInitPageResponse } from '../model/coreModelsMasterDataPatientGetPatientInitPageResponse';
import { CoreModelsMasterDataPatientGetPatientsByConditionRequest } from '../model/coreModelsMasterDataPatientGetPatientsByConditionRequest';
import { CoreModelsMasterDataPatientGetPatientsByConditionResponse } from '../model/coreModelsMasterDataPatientGetPatientsByConditionResponse';
import { CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest } from '../model/coreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest';
import { CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse } from '../model/coreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse';
import { CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest } from '../model/coreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest';
import { CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse } from '../model/coreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse';
import { CoreModelsMasterDataPriceTableDeleteDeletePriceTableRequest } from '../model/coreModelsMasterDataPriceTableDeleteDeletePriceTableRequest';
import { CoreModelsMasterDataPriceTableDeleteDeletePriceTableResponse } from '../model/coreModelsMasterDataPriceTableDeleteDeletePriceTableResponse';
import { CoreModelsMasterDataPriceTableGetPriceTableByConditionRequest } from '../model/coreModelsMasterDataPriceTableGetPriceTableByConditionRequest';
import { CoreModelsMasterDataPriceTableGetPriceTableByConditionResponse } from '../model/coreModelsMasterDataPriceTableGetPriceTableByConditionResponse';
import { CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest } from '../model/coreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest';
import { CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse } from '../model/coreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse';
import { CoreModelsMasterDataPriceTableUpdatePriceTableStatusRequest } from '../model/coreModelsMasterDataPriceTableUpdatePriceTableStatusRequest';
import { CoreModelsMasterDataPriceTableUpdatePriceTableStatusResponse } from '../model/coreModelsMasterDataPriceTableUpdatePriceTableStatusResponse';
import { CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest } from '../model/coreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest';
import { CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse } from '../model/coreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse';
import { CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest } from '../model/coreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest';
import { CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse } from '../model/coreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse';
import { CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest } from '../model/coreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest';
import { CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse } from '../model/coreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse';
import { CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest } from '../model/coreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest';
import { CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse } from '../model/coreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse';
import { CoreModelsMasterDataReadPatientExcelReadPatientExcelRequest } from '../model/coreModelsMasterDataReadPatientExcelReadPatientExcelRequest';
import { CoreModelsMasterDataReadPatientExcelReadPatientExcelResponse } from '../model/coreModelsMasterDataReadPatientExcelReadPatientExcelResponse';
import { CoreModelsMasterDataSelfCreateOrUpdateSelfRequest } from '../model/coreModelsMasterDataSelfCreateOrUpdateSelfRequest';
import { CoreModelsMasterDataSelfCreateOrUpdateSelfResponse } from '../model/coreModelsMasterDataSelfCreateOrUpdateSelfResponse';
import { CoreModelsMasterDataSelfDeleteDeleteSelfRequest } from '../model/coreModelsMasterDataSelfDeleteDeleteSelfRequest';
import { CoreModelsMasterDataSelfDeleteDeleteSelfResponse } from '../model/coreModelsMasterDataSelfDeleteDeleteSelfResponse';
import { CoreModelsMasterDataSelfGetSelfByConditionRequest } from '../model/coreModelsMasterDataSelfGetSelfByConditionRequest';
import { CoreModelsMasterDataSelfGetSelfByConditionResponse } from '../model/coreModelsMasterDataSelfGetSelfByConditionResponse';
import { CoreModelsMasterDataSelfInitPageGetSelfInitPageRequest } from '../model/coreModelsMasterDataSelfInitPageGetSelfInitPageRequest';
import { CoreModelsMasterDataSelfInitPageGetSelfInitPageResponse } from '../model/coreModelsMasterDataSelfInitPageGetSelfInitPageResponse';
import { CoreModelsMasterDataServiceCreateOrUpdateServiceRequest } from '../model/coreModelsMasterDataServiceCreateOrUpdateServiceRequest';
import { CoreModelsMasterDataServiceCreateOrUpdateServiceResponse } from '../model/coreModelsMasterDataServiceCreateOrUpdateServiceResponse';
import { CoreModelsMasterDataServiceDeleteDeleteServiceRequest } from '../model/coreModelsMasterDataServiceDeleteDeleteServiceRequest';
import { CoreModelsMasterDataServiceDeleteDeleteServiceResponse } from '../model/coreModelsMasterDataServiceDeleteDeleteServiceResponse';
import { CoreModelsMasterDataServiceGetServiceByConditionRequest } from '../model/coreModelsMasterDataServiceGetServiceByConditionRequest';
import { CoreModelsMasterDataServiceGetServiceByConditionResponse } from '../model/coreModelsMasterDataServiceGetServiceByConditionResponse';
import { CoreModelsMasterDataServiceInactivateServiceRequest } from '../model/coreModelsMasterDataServiceInactivateServiceRequest';
import { CoreModelsMasterDataServiceInactivateServiceResponse } from '../model/coreModelsMasterDataServiceInactivateServiceResponse';
import { CoreModelsMasterDataServiceInitPageGetServiceInitPageRequest } from '../model/coreModelsMasterDataServiceInitPageGetServiceInitPageRequest';
import { CoreModelsMasterDataServiceInitPageGetServiceInitPageResponse } from '../model/coreModelsMasterDataServiceInitPageGetServiceInitPageResponse';
import { CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest } from '../model/coreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest';
import { CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse } from '../model/coreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse';
import { CoreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest } from '../model/coreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest';
import { CoreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse } from '../model/coreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse';
import { CoreModelsMasterDataServicePackageGetServicePackageByConditionRequest } from '../model/coreModelsMasterDataServicePackageGetServicePackageByConditionRequest';
import { CoreModelsMasterDataServicePackageGetServicePackageByConditionResponse } from '../model/coreModelsMasterDataServicePackageGetServicePackageByConditionResponse';
import { CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest } from '../model/coreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest';
import { CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse } from '../model/coreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse';
import { CoreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest } from '../model/coreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest';
import { CoreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse } from '../model/coreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse';
import { CoreModelsWebServiceBaseEndpointListResponse } from '../model/coreModelsWebServiceBaseEndpointListResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MasterDataManagementService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminExportMasterDataEndpointsPost(body?: CoreModelsMasterDataAdminExportMasterDataEndpointsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataAdminExportMasterDataEndpointsResponse>;
    public adminExportMasterDataEndpointsPost(body?: CoreModelsMasterDataAdminExportMasterDataEndpointsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataAdminExportMasterDataEndpointsResponse>>;
    public adminExportMasterDataEndpointsPost(body?: CoreModelsMasterDataAdminExportMasterDataEndpointsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataAdminExportMasterDataEndpointsResponse>>;
    public adminExportMasterDataEndpointsPost(body?: CoreModelsMasterDataAdminExportMasterDataEndpointsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataAdminExportMasterDataEndpointsResponse>('post',`${this.basePath}/Admin/ExportMasterDataEndpoints`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bisnodeGetQuickSearchByConditionPost(body?: CoreModelsMasterDataBisnodeGetQuickSearchByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataBisnodeGetQuickSearchByConditionResponse>;
    public bisnodeGetQuickSearchByConditionPost(body?: CoreModelsMasterDataBisnodeGetQuickSearchByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataBisnodeGetQuickSearchByConditionResponse>>;
    public bisnodeGetQuickSearchByConditionPost(body?: CoreModelsMasterDataBisnodeGetQuickSearchByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataBisnodeGetQuickSearchByConditionResponse>>;
    public bisnodeGetQuickSearchByConditionPost(body?: CoreModelsMasterDataBisnodeGetQuickSearchByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataBisnodeGetQuickSearchByConditionResponse>('post',`${this.basePath}/Bisnode/GetQuickSearchByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicCreateOrUpdateClinicPost(body?: CoreModelsMasterDataClinicCreateOrUpdateClinicRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicCreateOrUpdateClinicResponse>;
    public clinicCreateOrUpdateClinicPost(body?: CoreModelsMasterDataClinicCreateOrUpdateClinicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicCreateOrUpdateClinicResponse>>;
    public clinicCreateOrUpdateClinicPost(body?: CoreModelsMasterDataClinicCreateOrUpdateClinicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicCreateOrUpdateClinicResponse>>;
    public clinicCreateOrUpdateClinicPost(body?: CoreModelsMasterDataClinicCreateOrUpdateClinicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicCreateOrUpdateClinicResponse>('post',`${this.basePath}/Clinic/CreateOrUpdateClinic`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicDeleteClinicDelete(body?: CoreModelsMasterDataClinicDeleteDeleteClinicRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicDeleteDeleteClinicResponse>;
    public clinicDeleteClinicDelete(body?: CoreModelsMasterDataClinicDeleteDeleteClinicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicDeleteDeleteClinicResponse>>;
    public clinicDeleteClinicDelete(body?: CoreModelsMasterDataClinicDeleteDeleteClinicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicDeleteDeleteClinicResponse>>;
    public clinicDeleteClinicDelete(body?: CoreModelsMasterDataClinicDeleteDeleteClinicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicDeleteDeleteClinicResponse>('delete',`${this.basePath}/Clinic/DeleteClinic`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicGetClinicByConditionPost(body?: CoreModelsMasterDataClinicGetClinicByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicGetClinicByConditionResponse>;
    public clinicGetClinicByConditionPost(body?: CoreModelsMasterDataClinicGetClinicByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicGetClinicByConditionResponse>>;
    public clinicGetClinicByConditionPost(body?: CoreModelsMasterDataClinicGetClinicByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicGetClinicByConditionResponse>>;
    public clinicGetClinicByConditionPost(body?: CoreModelsMasterDataClinicGetClinicByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicGetClinicByConditionResponse>('post',`${this.basePath}/Clinic/GetClinicByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicInventoryItemCreateOrUpdateClinicInventoryItemPost(body?: CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse>;
    public clinicInventoryItemCreateOrUpdateClinicInventoryItemPost(body?: CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse>>;
    public clinicInventoryItemCreateOrUpdateClinicInventoryItemPost(body?: CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse>>;
    public clinicInventoryItemCreateOrUpdateClinicInventoryItemPost(body?: CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicInventoryItemCreateOrUpdateClinicInventoryItemResponse>('post',`${this.basePath}/ClinicInventoryItem/CreateOrUpdateClinicInventoryItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicInventoryItemDeleteClinicInventoryItemDelete(body?: CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse>;
    public clinicInventoryItemDeleteClinicInventoryItemDelete(body?: CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse>>;
    public clinicInventoryItemDeleteClinicInventoryItemDelete(body?: CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse>>;
    public clinicInventoryItemDeleteClinicInventoryItemDelete(body?: CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicInventoryItemDeleteDeleteClinicInventoryItemResponse>('delete',`${this.basePath}/ClinicInventoryItem/DeleteClinicInventoryItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicInventoryItemGetClinicInventoryItemByConditionPost(body?: CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse>;
    public clinicInventoryItemGetClinicInventoryItemByConditionPost(body?: CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse>>;
    public clinicInventoryItemGetClinicInventoryItemByConditionPost(body?: CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse>>;
    public clinicInventoryItemGetClinicInventoryItemByConditionPost(body?: CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicInventoryItemGetClinicInventoryItemByConditionResponse>('post',`${this.basePath}/ClinicInventoryItem/GetClinicInventoryItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicRoomScheduleCreateOrUpdateClinicRoomSchedulePost(body?: CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse>;
    public clinicRoomScheduleCreateOrUpdateClinicRoomSchedulePost(body?: CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse>>;
    public clinicRoomScheduleCreateOrUpdateClinicRoomSchedulePost(body?: CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse>>;
    public clinicRoomScheduleCreateOrUpdateClinicRoomSchedulePost(body?: CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicRoomScheduleCreateOrUpdateClinicRoomScheduleResponse>('post',`${this.basePath}/ClinicRoomSchedule/CreateOrUpdateClinicRoomSchedule`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicRoomScheduleDeleteClinicRoomScheduleDelete(body?: CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse>;
    public clinicRoomScheduleDeleteClinicRoomScheduleDelete(body?: CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse>>;
    public clinicRoomScheduleDeleteClinicRoomScheduleDelete(body?: CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse>>;
    public clinicRoomScheduleDeleteClinicRoomScheduleDelete(body?: CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicRoomScheduleDeleteDeleteClinicRoomScheduleResponse>('delete',`${this.basePath}/ClinicRoomSchedule/DeleteClinicRoomSchedule`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clinicRoomScheduleGetClinicRoomSchedulesByConditionPost(body?: CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse>;
    public clinicRoomScheduleGetClinicRoomSchedulesByConditionPost(body?: CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse>>;
    public clinicRoomScheduleGetClinicRoomSchedulesByConditionPost(body?: CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse>>;
    public clinicRoomScheduleGetClinicRoomSchedulesByConditionPost(body?: CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicRoomScheduleGetClinicRoomSchedulesByConditionResponse>('post',`${this.basePath}/ClinicRoomSchedule/GetClinicRoomSchedulesByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companyCreateOrUpdateCompanySiteXJobTitlePost(body?: CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse>;
    public companyCreateOrUpdateCompanySiteXJobTitlePost(body?: CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse>>;
    public companyCreateOrUpdateCompanySiteXJobTitlePost(body?: CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse>>;
    public companyCreateOrUpdateCompanySiteXJobTitlePost(body?: CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataCompanyCreateOrUpdateCompanySiteXJobTitleResponse>('post',`${this.basePath}/Company/CreateOrUpdateCompanySiteXJobTitle`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companyGetCompanySiteByConditionPost(body?: CoreModelsMasterDataCompanyGetCompanySiteByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataCompanyGetCompanySiteByConditionResponse>;
    public companyGetCompanySiteByConditionPost(body?: CoreModelsMasterDataCompanyGetCompanySiteByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataCompanyGetCompanySiteByConditionResponse>>;
    public companyGetCompanySiteByConditionPost(body?: CoreModelsMasterDataCompanyGetCompanySiteByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataCompanyGetCompanySiteByConditionResponse>>;
    public companyGetCompanySiteByConditionPost(body?: CoreModelsMasterDataCompanyGetCompanySiteByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataCompanyGetCompanySiteByConditionResponse>('post',`${this.basePath}/Company/GetCompanySiteByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public configurationGetConfigurationsByConditionPost(body?: CoreModelsMasterDataConfigurationGetConfigurationsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataConfigurationGetConfigurationsByConditionResponse>;
    public configurationGetConfigurationsByConditionPost(body?: CoreModelsMasterDataConfigurationGetConfigurationsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataConfigurationGetConfigurationsByConditionResponse>>;
    public configurationGetConfigurationsByConditionPost(body?: CoreModelsMasterDataConfigurationGetConfigurationsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataConfigurationGetConfigurationsByConditionResponse>>;
    public configurationGetConfigurationsByConditionPost(body?: CoreModelsMasterDataConfigurationGetConfigurationsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataConfigurationGetConfigurationsByConditionResponse>('post',`${this.basePath}/Configuration/GetConfigurationsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public configurationUpdateConfigurationPost(body?: CoreModelsMasterDataConfigurationUpdateConfigurationRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataConfigurationUpdateConfigurationResponse>;
    public configurationUpdateConfigurationPost(body?: CoreModelsMasterDataConfigurationUpdateConfigurationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataConfigurationUpdateConfigurationResponse>>;
    public configurationUpdateConfigurationPost(body?: CoreModelsMasterDataConfigurationUpdateConfigurationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataConfigurationUpdateConfigurationResponse>>;
    public configurationUpdateConfigurationPost(body?: CoreModelsMasterDataConfigurationUpdateConfigurationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataConfigurationUpdateConfigurationResponse>('post',`${this.basePath}/Configuration/UpdateConfiguration`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public divisionNumberCreateOrUpdateDivisionNumberPost(body?: CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse>;
    public divisionNumberCreateOrUpdateDivisionNumberPost(body?: CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse>>;
    public divisionNumberCreateOrUpdateDivisionNumberPost(body?: CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse>>;
    public divisionNumberCreateOrUpdateDivisionNumberPost(body?: CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDivisionNumberCreateOrUpdateDivisionNumberResponse>('post',`${this.basePath}/DivisionNumber/CreateOrUpdateDivisionNumber`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public divisionNumberDeleteDivisionNumberDelete(body?: CoreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse>;
    public divisionNumberDeleteDivisionNumberDelete(body?: CoreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse>>;
    public divisionNumberDeleteDivisionNumberDelete(body?: CoreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse>>;
    public divisionNumberDeleteDivisionNumberDelete(body?: CoreModelsMasterDataDivisionNumberDeleteDivisionNumberRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDivisionNumberDeleteDivisionNumberResponse>('delete',`${this.basePath}/DivisionNumber/DeleteDivisionNumber`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public divisionNumberGetDivisionNumbersByConditionPost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse>;
    public divisionNumberGetDivisionNumbersByConditionPost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse>>;
    public divisionNumberGetDivisionNumbersByConditionPost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse>>;
    public divisionNumberGetDivisionNumbersByConditionPost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDivisionNumberGetDivisionNumbersByConditionResponse>('post',`${this.basePath}/DivisionNumber/GetDivisionNumbersByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentCreateOrUpdateDocumentPost(body?: CoreModelsMasterDataDocumentCreateOrUpdateDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentCreateOrUpdateDocumentResponse>;
    public documentCreateOrUpdateDocumentPost(body?: CoreModelsMasterDataDocumentCreateOrUpdateDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentCreateOrUpdateDocumentResponse>>;
    public documentCreateOrUpdateDocumentPost(body?: CoreModelsMasterDataDocumentCreateOrUpdateDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentCreateOrUpdateDocumentResponse>>;
    public documentCreateOrUpdateDocumentPost(body?: CoreModelsMasterDataDocumentCreateOrUpdateDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentCreateOrUpdateDocumentResponse>('post',`${this.basePath}/Document/CreateOrUpdateDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentDeleteDocumentDelete(body?: CoreModelsMasterDataDocumentDeleteDeleteDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentDeleteDeleteDocumentResponse>;
    public documentDeleteDocumentDelete(body?: CoreModelsMasterDataDocumentDeleteDeleteDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentDeleteDeleteDocumentResponse>>;
    public documentDeleteDocumentDelete(body?: CoreModelsMasterDataDocumentDeleteDeleteDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentDeleteDeleteDocumentResponse>>;
    public documentDeleteDocumentDelete(body?: CoreModelsMasterDataDocumentDeleteDeleteDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentDeleteDeleteDocumentResponse>('delete',`${this.basePath}/Document/DeleteDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentGetDocumentsByConditionPost(body?: CoreModelsMasterDataDocumentGetDocumentsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentGetDocumentsByConditionResponse>;
    public documentGetDocumentsByConditionPost(body?: CoreModelsMasterDataDocumentGetDocumentsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentGetDocumentsByConditionResponse>>;
    public documentGetDocumentsByConditionPost(body?: CoreModelsMasterDataDocumentGetDocumentsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentGetDocumentsByConditionResponse>>;
    public documentGetDocumentsByConditionPost(body?: CoreModelsMasterDataDocumentGetDocumentsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentGetDocumentsByConditionResponse>('post',`${this.basePath}/Document/GetDocumentsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentTemplateCreateOrUpdateDocumentTemplatePost(body?: CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse>;
    public documentTemplateCreateOrUpdateDocumentTemplatePost(body?: CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse>>;
    public documentTemplateCreateOrUpdateDocumentTemplatePost(body?: CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse>>;
    public documentTemplateCreateOrUpdateDocumentTemplatePost(body?: CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentTemplateCreateOrUpdateDocumentTemplateResponse>('post',`${this.basePath}/DocumentTemplate/CreateOrUpdateDocumentTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentTemplateDeleteDocumentTemplateDelete(body?: CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse>;
    public documentTemplateDeleteDocumentTemplateDelete(body?: CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse>>;
    public documentTemplateDeleteDocumentTemplateDelete(body?: CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse>>;
    public documentTemplateDeleteDocumentTemplateDelete(body?: CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentTemplateDeleteDeleteDocumentTemplateResponse>('delete',`${this.basePath}/DocumentTemplate/DeleteDocumentTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentTemplateGetDocumentTemplatesByConditionPost(body?: CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse>;
    public documentTemplateGetDocumentTemplatesByConditionPost(body?: CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse>>;
    public documentTemplateGetDocumentTemplatesByConditionPost(body?: CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse>>;
    public documentTemplateGetDocumentTemplatesByConditionPost(body?: CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentTemplateGetDocumentTemplatesByConditionResponse>('post',`${this.basePath}/DocumentTemplate/GetDocumentTemplatesByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailTemplateCreateOrUpdateEmailTemplatePost(body?: CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse>;
    public emailTemplateCreateOrUpdateEmailTemplatePost(body?: CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse>>;
    public emailTemplateCreateOrUpdateEmailTemplatePost(body?: CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse>>;
    public emailTemplateCreateOrUpdateEmailTemplatePost(body?: CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataEmailTemplateCreateOrUpdateEmailTemplateResponse>('post',`${this.basePath}/EmailTemplate/CreateOrUpdateEmailTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailTemplateDeleteEmailTemplateDelete(body?: CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse>;
    public emailTemplateDeleteEmailTemplateDelete(body?: CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse>>;
    public emailTemplateDeleteEmailTemplateDelete(body?: CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse>>;
    public emailTemplateDeleteEmailTemplateDelete(body?: CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataEmailTemplateDeleteDeleteEmailTemplateResponse>('delete',`${this.basePath}/EmailTemplate/DeleteEmailTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public emailTemplateGetEmailTemplateByConditionPost(body?: CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse>;
    public emailTemplateGetEmailTemplateByConditionPost(body?: CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse>>;
    public emailTemplateGetEmailTemplateByConditionPost(body?: CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse>>;
    public emailTemplateGetEmailTemplateByConditionPost(body?: CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataEmailTemplateGetEmailTemplateByConditionResponse>('post',`${this.basePath}/EmailTemplate/GetEmailTemplateByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public excelReadPatientExcelPost(body?: CoreModelsMasterDataReadPatientExcelReadPatientExcelRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataReadPatientExcelReadPatientExcelResponse>;
    public excelReadPatientExcelPost(body?: CoreModelsMasterDataReadPatientExcelReadPatientExcelRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataReadPatientExcelReadPatientExcelResponse>>;
    public excelReadPatientExcelPost(body?: CoreModelsMasterDataReadPatientExcelReadPatientExcelRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataReadPatientExcelReadPatientExcelResponse>>;
    public excelReadPatientExcelPost(body?: CoreModelsMasterDataReadPatientExcelReadPatientExcelRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataReadPatientExcelReadPatientExcelResponse>('post',`${this.basePath}/Excel/ReadPatientExcel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureCreateOrUpdateExposurePost(body?: CoreModelsMasterDataExposureCreateOrUpdateExposureRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureCreateOrUpdateExposureResponse>;
    public exposureCreateOrUpdateExposurePost(body?: CoreModelsMasterDataExposureCreateOrUpdateExposureRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureCreateOrUpdateExposureResponse>>;
    public exposureCreateOrUpdateExposurePost(body?: CoreModelsMasterDataExposureCreateOrUpdateExposureRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureCreateOrUpdateExposureResponse>>;
    public exposureCreateOrUpdateExposurePost(body?: CoreModelsMasterDataExposureCreateOrUpdateExposureRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureCreateOrUpdateExposureResponse>('post',`${this.basePath}/Exposure/CreateOrUpdateExposure`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureDeleteExposureDelete(body?: CoreModelsMasterDataExposureDeleteDeleteExposureRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureDeleteDeleteExposureResponse>;
    public exposureDeleteExposureDelete(body?: CoreModelsMasterDataExposureDeleteDeleteExposureRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureDeleteDeleteExposureResponse>>;
    public exposureDeleteExposureDelete(body?: CoreModelsMasterDataExposureDeleteDeleteExposureRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureDeleteDeleteExposureResponse>>;
    public exposureDeleteExposureDelete(body?: CoreModelsMasterDataExposureDeleteDeleteExposureRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureDeleteDeleteExposureResponse>('delete',`${this.basePath}/Exposure/DeleteExposure`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureGetExposureByConditionPost(body?: CoreModelsMasterDataExposureGetExposureByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureGetExposureByConditionResponse>;
    public exposureGetExposureByConditionPost(body?: CoreModelsMasterDataExposureGetExposureByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureGetExposureByConditionResponse>>;
    public exposureGetExposureByConditionPost(body?: CoreModelsMasterDataExposureGetExposureByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureGetExposureByConditionResponse>>;
    public exposureGetExposureByConditionPost(body?: CoreModelsMasterDataExposureGetExposureByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureGetExposureByConditionResponse>('post',`${this.basePath}/Exposure/GetExposureByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureItemCreateOrUpdateExposureItemPost(body?: CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse>;
    public exposureItemCreateOrUpdateExposureItemPost(body?: CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse>>;
    public exposureItemCreateOrUpdateExposureItemPost(body?: CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse>>;
    public exposureItemCreateOrUpdateExposureItemPost(body?: CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureItemCreateOrUpdateExposureItemResponse>('post',`${this.basePath}/ExposureItem/CreateOrUpdateExposureItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureItemDeleteExposureItemDelete(body?: CoreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse>;
    public exposureItemDeleteExposureItemDelete(body?: CoreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse>>;
    public exposureItemDeleteExposureItemDelete(body?: CoreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse>>;
    public exposureItemDeleteExposureItemDelete(body?: CoreModelsMasterDataExposureItemDeleteDeleteExposureItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureItemDeleteDeleteExposureItemResponse>('delete',`${this.basePath}/ExposureItem/DeleteExposureItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exposureItemGetExposureItemByConditionPost(body?: CoreModelsMasterDataExposureItemGetExposureItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureItemGetExposureItemByConditionResponse>;
    public exposureItemGetExposureItemByConditionPost(body?: CoreModelsMasterDataExposureItemGetExposureItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureItemGetExposureItemByConditionResponse>>;
    public exposureItemGetExposureItemByConditionPost(body?: CoreModelsMasterDataExposureItemGetExposureItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureItemGetExposureItemByConditionResponse>>;
    public exposureItemGetExposureItemByConditionPost(body?: CoreModelsMasterDataExposureItemGetExposureItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureItemGetExposureItemByConditionResponse>('post',`${this.basePath}/ExposureItem/GetExposureItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hSCOCreateOrUpdateHSCOPost(body?: CoreModelsMasterDataHSCOCreateOrUpdateHSCORequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataHSCOCreateOrUpdateHSCOResponse>;
    public hSCOCreateOrUpdateHSCOPost(body?: CoreModelsMasterDataHSCOCreateOrUpdateHSCORequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataHSCOCreateOrUpdateHSCOResponse>>;
    public hSCOCreateOrUpdateHSCOPost(body?: CoreModelsMasterDataHSCOCreateOrUpdateHSCORequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataHSCOCreateOrUpdateHSCOResponse>>;
    public hSCOCreateOrUpdateHSCOPost(body?: CoreModelsMasterDataHSCOCreateOrUpdateHSCORequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataHSCOCreateOrUpdateHSCOResponse>('post',`${this.basePath}/HSCO/CreateOrUpdateHSCO`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hSCODeleteHSCODelete(body?: CoreModelsMasterDataHSCODeleteDeleteHSCORequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataHSCODeleteDeleteHSCOResponse>;
    public hSCODeleteHSCODelete(body?: CoreModelsMasterDataHSCODeleteDeleteHSCORequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataHSCODeleteDeleteHSCOResponse>>;
    public hSCODeleteHSCODelete(body?: CoreModelsMasterDataHSCODeleteDeleteHSCORequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataHSCODeleteDeleteHSCOResponse>>;
    public hSCODeleteHSCODelete(body?: CoreModelsMasterDataHSCODeleteDeleteHSCORequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataHSCODeleteDeleteHSCOResponse>('delete',`${this.basePath}/HSCO/DeleteHSCO`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hSCOGetHSCOByConditionPost(body?: CoreModelsMasterDataHSCOGetHSCOByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataHSCOGetHSCOByConditionResponse>;
    public hSCOGetHSCOByConditionPost(body?: CoreModelsMasterDataHSCOGetHSCOByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataHSCOGetHSCOByConditionResponse>>;
    public hSCOGetHSCOByConditionPost(body?: CoreModelsMasterDataHSCOGetHSCOByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataHSCOGetHSCOByConditionResponse>>;
    public hSCOGetHSCOByConditionPost(body?: CoreModelsMasterDataHSCOGetHSCOByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataHSCOGetHSCOByConditionResponse>('post',`${this.basePath}/HSCO/GetHSCOByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hSCOGetHSCOTreeListPost(body?: CoreModelsMasterDataHSCOGetHSCOTreeListRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataHSCOGetHSCOTreeListResponse>;
    public hSCOGetHSCOTreeListPost(body?: CoreModelsMasterDataHSCOGetHSCOTreeListRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataHSCOGetHSCOTreeListResponse>>;
    public hSCOGetHSCOTreeListPost(body?: CoreModelsMasterDataHSCOGetHSCOTreeListRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataHSCOGetHSCOTreeListResponse>>;
    public hSCOGetHSCOTreeListPost(body?: CoreModelsMasterDataHSCOGetHSCOTreeListRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataHSCOGetHSCOTreeListResponse>('post',`${this.basePath}/HSCO/GetHSCOTreeList`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetClinicInitPagePost(body?: CoreModelsMasterDataClinicInitPageGetClinicInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicInitPageGetClinicInitPageResponse>;
    public initPageGetClinicInitPagePost(body?: CoreModelsMasterDataClinicInitPageGetClinicInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicInitPageGetClinicInitPageResponse>>;
    public initPageGetClinicInitPagePost(body?: CoreModelsMasterDataClinicInitPageGetClinicInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicInitPageGetClinicInitPageResponse>>;
    public initPageGetClinicInitPagePost(body?: CoreModelsMasterDataClinicInitPageGetClinicInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicInitPageGetClinicInitPageResponse>('post',`${this.basePath}/InitPage/GetClinicInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetClinicInventoryItemInitPagePost(body?: CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse>;
    public initPageGetClinicInventoryItemInitPagePost(body?: CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse>>;
    public initPageGetClinicInventoryItemInitPagePost(body?: CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse>>;
    public initPageGetClinicInventoryItemInitPagePost(body?: CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataClinicInventoryItemInitPageGetClinicInventoryItemInitPageResponse>('post',`${this.basePath}/InitPage/GetClinicInventoryItemInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetDivisionNumberInitPagePost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse>;
    public initPageGetDivisionNumberInitPagePost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse>>;
    public initPageGetDivisionNumberInitPagePost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse>>;
    public initPageGetDivisionNumberInitPagePost(body?: CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDivisionNumberGetDivisionNumberInitPageResponse>('post',`${this.basePath}/InitPage/GetDivisionNumberInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetDocumentTemplateInitPagePost(body?: CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse>;
    public initPageGetDocumentTemplateInitPagePost(body?: CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse>>;
    public initPageGetDocumentTemplateInitPagePost(body?: CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse>>;
    public initPageGetDocumentTemplateInitPagePost(body?: CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataDocumentTemplateInitPageGetDocumentTemplateInitPageResponse>('post',`${this.basePath}/InitPage/GetDocumentTemplateInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetEmailTemplateInitPagePost(body?: CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse>;
    public initPageGetEmailTemplateInitPagePost(body?: CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse>>;
    public initPageGetEmailTemplateInitPagePost(body?: CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse>>;
    public initPageGetEmailTemplateInitPagePost(body?: CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataEmailTemplateInitPageGetEmailTemplateInitPageResponse>('post',`${this.basePath}/InitPage/GetEmailTemplateInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetExposureInitPagePost(body?: CoreModelsMasterDataExposureInitPageExposureInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataExposureInitPageExposureInitPageResponse>;
    public initPageGetExposureInitPagePost(body?: CoreModelsMasterDataExposureInitPageExposureInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataExposureInitPageExposureInitPageResponse>>;
    public initPageGetExposureInitPagePost(body?: CoreModelsMasterDataExposureInitPageExposureInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataExposureInitPageExposureInitPageResponse>>;
    public initPageGetExposureInitPagePost(body?: CoreModelsMasterDataExposureInitPageExposureInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataExposureInitPageExposureInitPageResponse>('post',`${this.basePath}/InitPage/GetExposureInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetItemInitPagePost(body?: CoreModelsMasterDataItemInitPageGetItemInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataItemInitPageGetItemInitPageResponse>;
    public initPageGetItemInitPagePost(body?: CoreModelsMasterDataItemInitPageGetItemInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataItemInitPageGetItemInitPageResponse>>;
    public initPageGetItemInitPagePost(body?: CoreModelsMasterDataItemInitPageGetItemInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataItemInitPageGetItemInitPageResponse>>;
    public initPageGetItemInitPagePost(body?: CoreModelsMasterDataItemInitPageGetItemInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataItemInitPageGetItemInitPageResponse>('post',`${this.basePath}/InitPage/GetItemInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetLabInitPagePost(body?: CoreModelsMasterDataLabGetLabInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataLabGetLabInitPageResponse>;
    public initPageGetLabInitPagePost(body?: CoreModelsMasterDataLabGetLabInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataLabGetLabInitPageResponse>>;
    public initPageGetLabInitPagePost(body?: CoreModelsMasterDataLabGetLabInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataLabGetLabInitPageResponse>>;
    public initPageGetLabInitPagePost(body?: CoreModelsMasterDataLabGetLabInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataLabGetLabInitPageResponse>('post',`${this.basePath}/InitPage/GetLabInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetMedicalEmployeeInitPagePost(body?: CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse>;
    public initPageGetMedicalEmployeeInitPagePost(body?: CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse>>;
    public initPageGetMedicalEmployeeInitPagePost(body?: CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse>>;
    public initPageGetMedicalEmployeeInitPagePost(body?: CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalEmployeeInitPageMedicalEmployeeInitPageResponse>('post',`${this.basePath}/InitPage/GetMedicalEmployeeInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetOccupationalHealthInitPagePost(body?: CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse>;
    public initPageGetOccupationalHealthInitPagePost(body?: CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse>>;
    public initPageGetOccupationalHealthInitPagePost(body?: CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse>>;
    public initPageGetOccupationalHealthInitPagePost(body?: CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthInitPageGetOccupationalHealthInitPageResponse>('post',`${this.basePath}/InitPage/GetOccupationalHealthInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetPartnerInitPagePost(body?: CoreModelsMasterDataPartnerPartnerInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPartnerPartnerInitPageResponse>;
    public initPageGetPartnerInitPagePost(body?: CoreModelsMasterDataPartnerPartnerInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPartnerPartnerInitPageResponse>>;
    public initPageGetPartnerInitPagePost(body?: CoreModelsMasterDataPartnerPartnerInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPartnerPartnerInitPageResponse>>;
    public initPageGetPartnerInitPagePost(body?: CoreModelsMasterDataPartnerPartnerInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPartnerPartnerInitPageResponse>('post',`${this.basePath}/InitPage/GetPartnerInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetPatientInitPagePost(body?: CoreModelsMasterDataPatientGetPatientInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientGetPatientInitPageResponse>;
    public initPageGetPatientInitPagePost(body?: CoreModelsMasterDataPatientGetPatientInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientGetPatientInitPageResponse>>;
    public initPageGetPatientInitPagePost(body?: CoreModelsMasterDataPatientGetPatientInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientGetPatientInitPageResponse>>;
    public initPageGetPatientInitPagePost(body?: CoreModelsMasterDataPatientGetPatientInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientGetPatientInitPageResponse>('post',`${this.basePath}/InitPage/GetPatientInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetServiceInitPagePost(body?: CoreModelsMasterDataServiceInitPageGetServiceInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServiceInitPageGetServiceInitPageResponse>;
    public initPageGetServiceInitPagePost(body?: CoreModelsMasterDataServiceInitPageGetServiceInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServiceInitPageGetServiceInitPageResponse>>;
    public initPageGetServiceInitPagePost(body?: CoreModelsMasterDataServiceInitPageGetServiceInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServiceInitPageGetServiceInitPageResponse>>;
    public initPageGetServiceInitPagePost(body?: CoreModelsMasterDataServiceInitPageGetServiceInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServiceInitPageGetServiceInitPageResponse>('post',`${this.basePath}/InitPage/GetServiceInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public itemCreateOrUpdateItemPost(body?: CoreModelsMasterDataItemCreateOrUpdateItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataItemCreateOrUpdateItemResponse>;
    public itemCreateOrUpdateItemPost(body?: CoreModelsMasterDataItemCreateOrUpdateItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataItemCreateOrUpdateItemResponse>>;
    public itemCreateOrUpdateItemPost(body?: CoreModelsMasterDataItemCreateOrUpdateItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataItemCreateOrUpdateItemResponse>>;
    public itemCreateOrUpdateItemPost(body?: CoreModelsMasterDataItemCreateOrUpdateItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataItemCreateOrUpdateItemResponse>('post',`${this.basePath}/Item/CreateOrUpdateItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public itemDeleteItemDelete(body?: CoreModelsMasterDataItemDeleteDeleteItemRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataItemDeleteDeleteItemResponse>;
    public itemDeleteItemDelete(body?: CoreModelsMasterDataItemDeleteDeleteItemRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataItemDeleteDeleteItemResponse>>;
    public itemDeleteItemDelete(body?: CoreModelsMasterDataItemDeleteDeleteItemRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataItemDeleteDeleteItemResponse>>;
    public itemDeleteItemDelete(body?: CoreModelsMasterDataItemDeleteDeleteItemRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataItemDeleteDeleteItemResponse>('delete',`${this.basePath}/Item/DeleteItem`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public itemGetItemByConditionPost(body?: CoreModelsMasterDataItemGetItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataItemGetItemByConditionResponse>;
    public itemGetItemByConditionPost(body?: CoreModelsMasterDataItemGetItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataItemGetItemByConditionResponse>>;
    public itemGetItemByConditionPost(body?: CoreModelsMasterDataItemGetItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataItemGetItemByConditionResponse>>;
    public itemGetItemByConditionPost(body?: CoreModelsMasterDataItemGetItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataItemGetItemByConditionResponse>('post',`${this.basePath}/Item/GetItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public jobTitleCreateOrUpdateJobTitlePost(body?: CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse>;
    public jobTitleCreateOrUpdateJobTitlePost(body?: CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse>>;
    public jobTitleCreateOrUpdateJobTitlePost(body?: CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse>>;
    public jobTitleCreateOrUpdateJobTitlePost(body?: CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataJobTitleCreateOrUpdateJobTitleResponse>('post',`${this.basePath}/JobTitle/CreateOrUpdateJobTitle`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public jobTitleDeleteJobTitleDelete(body?: CoreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse>;
    public jobTitleDeleteJobTitleDelete(body?: CoreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse>>;
    public jobTitleDeleteJobTitleDelete(body?: CoreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse>>;
    public jobTitleDeleteJobTitleDelete(body?: CoreModelsMasterDataJobTitleDeleteDeleteJobTitleRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataJobTitleDeleteDeleteJobTitleResponse>('delete',`${this.basePath}/JobTitle/DeleteJobTitle`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public jobTitleGetJobTitleByConditionPost(body?: CoreModelsMasterDataJobTitleGetJobtitleByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataJobTitleGetJobTitleByConditionResponse>;
    public jobTitleGetJobTitleByConditionPost(body?: CoreModelsMasterDataJobTitleGetJobtitleByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataJobTitleGetJobTitleByConditionResponse>>;
    public jobTitleGetJobTitleByConditionPost(body?: CoreModelsMasterDataJobTitleGetJobtitleByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataJobTitleGetJobTitleByConditionResponse>>;
    public jobTitleGetJobTitleByConditionPost(body?: CoreModelsMasterDataJobTitleGetJobtitleByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataJobTitleGetJobTitleByConditionResponse>('post',`${this.basePath}/JobTitle/GetJobTitleByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public jobTitleGetJobTitleInitPagePost(body?: CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse>;
    public jobTitleGetJobTitleInitPagePost(body?: CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse>>;
    public jobTitleGetJobTitleInitPagePost(body?: CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse>>;
    public jobTitleGetJobTitleInitPagePost(body?: CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataJobTitleInitPageGetJobTitleInitPageResponse>('post',`${this.basePath}/JobTitle/GetJobTitleInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labCreateOrUpdateLabPost(body?: CoreModelsMasterDataLabCreateOrUpdateLabRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataLabCreateOrUpdateLabResponse>;
    public labCreateOrUpdateLabPost(body?: CoreModelsMasterDataLabCreateOrUpdateLabRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataLabCreateOrUpdateLabResponse>>;
    public labCreateOrUpdateLabPost(body?: CoreModelsMasterDataLabCreateOrUpdateLabRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataLabCreateOrUpdateLabResponse>>;
    public labCreateOrUpdateLabPost(body?: CoreModelsMasterDataLabCreateOrUpdateLabRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataLabCreateOrUpdateLabResponse>('post',`${this.basePath}/Lab/CreateOrUpdateLab`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labDeleteLabDelete(body?: CoreModelsMasterDataLabDeleteLabRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataLabDeleteLabResponse>;
    public labDeleteLabDelete(body?: CoreModelsMasterDataLabDeleteLabRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataLabDeleteLabResponse>>;
    public labDeleteLabDelete(body?: CoreModelsMasterDataLabDeleteLabRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataLabDeleteLabResponse>>;
    public labDeleteLabDelete(body?: CoreModelsMasterDataLabDeleteLabRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataLabDeleteLabResponse>('delete',`${this.basePath}/Lab/DeleteLab`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labGetLabServicesByConditionPost(body?: CoreModelsMasterDataLabGetLabServicesByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataLabGetLabServicesByConditionResponse>;
    public labGetLabServicesByConditionPost(body?: CoreModelsMasterDataLabGetLabServicesByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataLabGetLabServicesByConditionResponse>>;
    public labGetLabServicesByConditionPost(body?: CoreModelsMasterDataLabGetLabServicesByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataLabGetLabServicesByConditionResponse>>;
    public labGetLabServicesByConditionPost(body?: CoreModelsMasterDataLabGetLabServicesByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataLabGetLabServicesByConditionResponse>('post',`${this.basePath}/Lab/GetLabServicesByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public labGetLabsByConditionPost(body?: CoreModelsMasterDataLabGetLabsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataLabGetLabsByConditionResponse>;
    public labGetLabsByConditionPost(body?: CoreModelsMasterDataLabGetLabsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataLabGetLabsByConditionResponse>>;
    public labGetLabsByConditionPost(body?: CoreModelsMasterDataLabGetLabsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataLabGetLabsByConditionResponse>>;
    public labGetLabsByConditionPost(body?: CoreModelsMasterDataLabGetLabsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataLabGetLabsByConditionResponse>('post',`${this.basePath}/Lab/GetLabsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logGetAuditLogsByConditionPost(body?: CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse>;
    public logGetAuditLogsByConditionPost(body?: CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse>>;
    public logGetAuditLogsByConditionPost(body?: CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse>>;
    public logGetAuditLogsByConditionPost(body?: CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataAuditLogGetMasterDataManagementAuditLogsByConditionResponse>('post',`${this.basePath}/Log/GetAuditLogsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public macroCreateOrUpdateMacroPost(body?: CoreModelsMasterDataMacroCreateOrUpdateMacroRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMacroCreateOrUpdateMacroResponse>;
    public macroCreateOrUpdateMacroPost(body?: CoreModelsMasterDataMacroCreateOrUpdateMacroRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMacroCreateOrUpdateMacroResponse>>;
    public macroCreateOrUpdateMacroPost(body?: CoreModelsMasterDataMacroCreateOrUpdateMacroRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMacroCreateOrUpdateMacroResponse>>;
    public macroCreateOrUpdateMacroPost(body?: CoreModelsMasterDataMacroCreateOrUpdateMacroRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMacroCreateOrUpdateMacroResponse>('post',`${this.basePath}/Macro/CreateOrUpdateMacro`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public macroDeleteMacroDelete(body?: CoreModelsMasterDataMacroDeleteDeleteMacroRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMacroDeleteDeleteMacroResponse>;
    public macroDeleteMacroDelete(body?: CoreModelsMasterDataMacroDeleteDeleteMacroRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMacroDeleteDeleteMacroResponse>>;
    public macroDeleteMacroDelete(body?: CoreModelsMasterDataMacroDeleteDeleteMacroRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMacroDeleteDeleteMacroResponse>>;
    public macroDeleteMacroDelete(body?: CoreModelsMasterDataMacroDeleteDeleteMacroRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMacroDeleteDeleteMacroResponse>('delete',`${this.basePath}/Macro/DeleteMacro`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public macroGetMacrosByConditionPost(body?: CoreModelsMasterDataMacroGetMacrosByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMacroGetMacrosByConditionResponse>;
    public macroGetMacrosByConditionPost(body?: CoreModelsMasterDataMacroGetMacrosByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMacroGetMacrosByConditionResponse>>;
    public macroGetMacrosByConditionPost(body?: CoreModelsMasterDataMacroGetMacrosByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMacroGetMacrosByConditionResponse>>;
    public macroGetMacrosByConditionPost(body?: CoreModelsMasterDataMacroGetMacrosByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMacroGetMacrosByConditionResponse>('post',`${this.basePath}/Macro/GetMacrosByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param T 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterDataManagementGetEnumGet(T?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public masterDataManagementGetEnumGet(T?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public masterDataManagementGetEnumGet(T?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public masterDataManagementGetEnumGet(T?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (T !== undefined && T !== null) {
            queryParameters = queryParameters.set('T', <any>T);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<any>>('get',`${this.basePath}/MasterDataManagement/GetEnum`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public masterDataManagementPingGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public masterDataManagementPingGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public masterDataManagementPingGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public masterDataManagementPingGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/MasterDataManagement/Ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalContractCreateOrUpdateMedicalContractPost(body?: CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse>;
    public medicalContractCreateOrUpdateMedicalContractPost(body?: CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse>>;
    public medicalContractCreateOrUpdateMedicalContractPost(body?: CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse>>;
    public medicalContractCreateOrUpdateMedicalContractPost(body?: CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalContractCreateOrUpdateMedicalContractResponse>('post',`${this.basePath}/MedicalContract/CreateOrUpdateMedicalContract`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalContractDeleteMedicalContractDelete(body?: CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse>;
    public medicalContractDeleteMedicalContractDelete(body?: CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse>>;
    public medicalContractDeleteMedicalContractDelete(body?: CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse>>;
    public medicalContractDeleteMedicalContractDelete(body?: CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalContractDeleteDeleteMedicalContractResponse>('delete',`${this.basePath}/MedicalContract/DeleteMedicalContract`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalContractGetMedicalContractByConditionPost(body?: CoreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse>;
    public medicalContractGetMedicalContractByConditionPost(body?: CoreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse>>;
    public medicalContractGetMedicalContractByConditionPost(body?: CoreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse>>;
    public medicalContractGetMedicalContractByConditionPost(body?: CoreModelsMasterDataMedicalContractGetMedicalContractByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalContractGetMedicalContractByConditionResponse>('post',`${this.basePath}/MedicalContract/GetMedicalContractByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalEmployeeCreateOrUpdateMedicalEmployeePost(body?: CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse>;
    public medicalEmployeeCreateOrUpdateMedicalEmployeePost(body?: CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse>>;
    public medicalEmployeeCreateOrUpdateMedicalEmployeePost(body?: CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse>>;
    public medicalEmployeeCreateOrUpdateMedicalEmployeePost(body?: CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalEmployeeCreateOrUpdateMedicalEmployeeResponse>('post',`${this.basePath}/MedicalEmployee/CreateOrUpdateMedicalEmployee`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalEmployeeDeleteMedicalEmployeeDelete(body?: CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse>;
    public medicalEmployeeDeleteMedicalEmployeeDelete(body?: CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse>>;
    public medicalEmployeeDeleteMedicalEmployeeDelete(body?: CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse>>;
    public medicalEmployeeDeleteMedicalEmployeeDelete(body?: CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalEmployeeDeleteDeleteMedicalEmployeeResponse>('delete',`${this.basePath}/MedicalEmployee/DeleteMedicalEmployee`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public medicalEmployeeGetMedicalEmployeeByConditionPost(body?: CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse>;
    public medicalEmployeeGetMedicalEmployeeByConditionPost(body?: CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse>>;
    public medicalEmployeeGetMedicalEmployeeByConditionPost(body?: CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse>>;
    public medicalEmployeeGetMedicalEmployeeByConditionPost(body?: CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataMedicalEmployeeGetMedicalEmployeeByConditionResponse>('post',`${this.basePath}/MedicalEmployee/GetMedicalEmployeeByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthCreateOrUpdateOccupationalHealthPost(body?: CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse>;
    public occupationalHealthCreateOrUpdateOccupationalHealthPost(body?: CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse>>;
    public occupationalHealthCreateOrUpdateOccupationalHealthPost(body?: CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse>>;
    public occupationalHealthCreateOrUpdateOccupationalHealthPost(body?: CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthCreateOrUpdateOccupationalHealthResponse>('post',`${this.basePath}/OccupationalHealth/CreateOrUpdateOccupationalHealth`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthDeleteOccupationalHealthDelete(body?: CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse>;
    public occupationalHealthDeleteOccupationalHealthDelete(body?: CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse>>;
    public occupationalHealthDeleteOccupationalHealthDelete(body?: CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse>>;
    public occupationalHealthDeleteOccupationalHealthDelete(body?: CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthDeleteDeleteOccupationalHealthResponse>('delete',`${this.basePath}/OccupationalHealth/DeleteOccupationalHealth`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthGetOccupationalHealthByConditionPost(body?: CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse>;
    public occupationalHealthGetOccupationalHealthByConditionPost(body?: CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse>>;
    public occupationalHealthGetOccupationalHealthByConditionPost(body?: CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse>>;
    public occupationalHealthGetOccupationalHealthByConditionPost(body?: CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthGetOccupationalHealthByConditionResponse>('post',`${this.basePath}/OccupationalHealth/GetOccupationalHealthByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthOccupationalHealthExcelExportPost(body?: CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse>;
    public occupationalHealthOccupationalHealthExcelExportPost(body?: CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse>>;
    public occupationalHealthOccupationalHealthExcelExportPost(body?: CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse>>;
    public occupationalHealthOccupationalHealthExcelExportPost(body?: CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthExcelOccupationalHealthExcelExportResponse>('post',`${this.basePath}/OccupationalHealth/OccupationalHealthExcelExport`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthReadOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse>;
    public occupationalHealthReadOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse>>;
    public occupationalHealthReadOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse>>;
    public occupationalHealthReadOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthExcelReadOccupationalHealthExcelResponse>('post',`${this.basePath}/OccupationalHealth/ReadOccupationalHealthExcel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public occupationalHealthSaveOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse>;
    public occupationalHealthSaveOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse>>;
    public occupationalHealthSaveOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse>>;
    public occupationalHealthSaveOccupationalHealthExcelPost(body?: CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataOccupationalHealthExcelSaveOccupationalHealthExcelResponse>('post',`${this.basePath}/OccupationalHealth/SaveOccupationalHealthExcel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partnerCreateOrUpdatePartnerPost(body?: CoreModelsMasterDataPartnerCreateOrUpdatePartnerRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPartnerCreateOrUpdatePartnerResponse>;
    public partnerCreateOrUpdatePartnerPost(body?: CoreModelsMasterDataPartnerCreateOrUpdatePartnerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPartnerCreateOrUpdatePartnerResponse>>;
    public partnerCreateOrUpdatePartnerPost(body?: CoreModelsMasterDataPartnerCreateOrUpdatePartnerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPartnerCreateOrUpdatePartnerResponse>>;
    public partnerCreateOrUpdatePartnerPost(body?: CoreModelsMasterDataPartnerCreateOrUpdatePartnerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPartnerCreateOrUpdatePartnerResponse>('post',`${this.basePath}/Partner/CreateOrUpdatePartner`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partnerDeletePartnerDelete(body?: CoreModelsMasterDataPartnerDeletePartnerRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPartnerDeletePartnerResponse>;
    public partnerDeletePartnerDelete(body?: CoreModelsMasterDataPartnerDeletePartnerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPartnerDeletePartnerResponse>>;
    public partnerDeletePartnerDelete(body?: CoreModelsMasterDataPartnerDeletePartnerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPartnerDeletePartnerResponse>>;
    public partnerDeletePartnerDelete(body?: CoreModelsMasterDataPartnerDeletePartnerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPartnerDeletePartnerResponse>('delete',`${this.basePath}/Partner/DeletePartner`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partnerGetPartnerByConditionPost(body?: CoreModelsMasterDataPartnerGetPartnerByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPartnerGetPartnerByConditionResponse>;
    public partnerGetPartnerByConditionPost(body?: CoreModelsMasterDataPartnerGetPartnerByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPartnerGetPartnerByConditionResponse>>;
    public partnerGetPartnerByConditionPost(body?: CoreModelsMasterDataPartnerGetPartnerByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPartnerGetPartnerByConditionResponse>>;
    public partnerGetPartnerByConditionPost(body?: CoreModelsMasterDataPartnerGetPartnerByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPartnerGetPartnerByConditionResponse>('post',`${this.basePath}/Partner/GetPartnerByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partnerGetSubContractNumbersForPartnerPost(body?: CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse>;
    public partnerGetSubContractNumbersForPartnerPost(body?: CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse>>;
    public partnerGetSubContractNumbersForPartnerPost(body?: CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse>>;
    public partnerGetSubContractNumbersForPartnerPost(body?: CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientGetSubcontractNumbersForPartnerResponse>('post',`${this.basePath}/Partner/GetSubContractNumbersForPartner`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientCreateOrUpdatePatientPost(body?: CoreModelsMasterDataPatientCreateOrUpdatePatientRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientCreateOrUpdatePatientResponse>;
    public patientCreateOrUpdatePatientPost(body?: CoreModelsMasterDataPatientCreateOrUpdatePatientRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientCreateOrUpdatePatientResponse>>;
    public patientCreateOrUpdatePatientPost(body?: CoreModelsMasterDataPatientCreateOrUpdatePatientRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientCreateOrUpdatePatientResponse>>;
    public patientCreateOrUpdatePatientPost(body?: CoreModelsMasterDataPatientCreateOrUpdatePatientRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientCreateOrUpdatePatientResponse>('post',`${this.basePath}/Patient/CreateOrUpdatePatient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientDeletePatientDelete(body?: CoreModelsMasterDataPatientDeleteDeletePatientRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientDeleteDeletePatientResponse>;
    public patientDeletePatientDelete(body?: CoreModelsMasterDataPatientDeleteDeletePatientRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientDeleteDeletePatientResponse>>;
    public patientDeletePatientDelete(body?: CoreModelsMasterDataPatientDeleteDeletePatientRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientDeleteDeletePatientResponse>>;
    public patientDeletePatientDelete(body?: CoreModelsMasterDataPatientDeleteDeletePatientRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientDeleteDeletePatientResponse>('delete',`${this.basePath}/Patient/DeletePatient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientGetAllPatientsWithNotCompletedExaminationPost(body?: CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse>;
    public patientGetAllPatientsWithNotCompletedExaminationPost(body?: CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse>>;
    public patientGetAllPatientsWithNotCompletedExaminationPost(body?: CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse>>;
    public patientGetAllPatientsWithNotCompletedExaminationPost(body?: CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientGetAllPatientsWithNotCompletedExaminationResponse>('post',`${this.basePath}/Patient/GetAllPatientsWithNotCompletedExamination`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patientGetPatientsByConditionPost(body?: CoreModelsMasterDataPatientGetPatientsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPatientGetPatientsByConditionResponse>;
    public patientGetPatientsByConditionPost(body?: CoreModelsMasterDataPatientGetPatientsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPatientGetPatientsByConditionResponse>>;
    public patientGetPatientsByConditionPost(body?: CoreModelsMasterDataPatientGetPatientsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPatientGetPatientsByConditionResponse>>;
    public patientGetPatientsByConditionPost(body?: CoreModelsMasterDataPatientGetPatientsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPatientGetPatientsByConditionResponse>('post',`${this.basePath}/Patient/GetPatientsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTableCreateOrUpdatePriceTablePost(body?: CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse>;
    public priceTableCreateOrUpdatePriceTablePost(body?: CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse>>;
    public priceTableCreateOrUpdatePriceTablePost(body?: CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse>>;
    public priceTableCreateOrUpdatePriceTablePost(body?: CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTableCreateOrUpdatePriceTableResponse>('post',`${this.basePath}/PriceTable/CreateOrUpdatePriceTable`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTableDeletePriceTableDelete(body?: CoreModelsMasterDataPriceTableDeleteDeletePriceTableRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTableDeleteDeletePriceTableResponse>;
    public priceTableDeletePriceTableDelete(body?: CoreModelsMasterDataPriceTableDeleteDeletePriceTableRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTableDeleteDeletePriceTableResponse>>;
    public priceTableDeletePriceTableDelete(body?: CoreModelsMasterDataPriceTableDeleteDeletePriceTableRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTableDeleteDeletePriceTableResponse>>;
    public priceTableDeletePriceTableDelete(body?: CoreModelsMasterDataPriceTableDeleteDeletePriceTableRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTableDeleteDeletePriceTableResponse>('delete',`${this.basePath}/PriceTable/DeletePriceTable`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTableGetPriceTableByConditionPost(body?: CoreModelsMasterDataPriceTableGetPriceTableByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTableGetPriceTableByConditionResponse>;
    public priceTableGetPriceTableByConditionPost(body?: CoreModelsMasterDataPriceTableGetPriceTableByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTableGetPriceTableByConditionResponse>>;
    public priceTableGetPriceTableByConditionPost(body?: CoreModelsMasterDataPriceTableGetPriceTableByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTableGetPriceTableByConditionResponse>>;
    public priceTableGetPriceTableByConditionPost(body?: CoreModelsMasterDataPriceTableGetPriceTableByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTableGetPriceTableByConditionResponse>('post',`${this.basePath}/PriceTable/GetPriceTableByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTableGetPriceTableInitPagePost(body?: CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse>;
    public priceTableGetPriceTableInitPagePost(body?: CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse>>;
    public priceTableGetPriceTableInitPagePost(body?: CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse>>;
    public priceTableGetPriceTableInitPagePost(body?: CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTableInitPageGetPriceTableInitPageResponse>('post',`${this.basePath}/PriceTable/GetPriceTableInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTableUpdatePriceTableStatusPost(body?: CoreModelsMasterDataPriceTableUpdatePriceTableStatusRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTableUpdatePriceTableStatusResponse>;
    public priceTableUpdatePriceTableStatusPost(body?: CoreModelsMasterDataPriceTableUpdatePriceTableStatusRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTableUpdatePriceTableStatusResponse>>;
    public priceTableUpdatePriceTableStatusPost(body?: CoreModelsMasterDataPriceTableUpdatePriceTableStatusRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTableUpdatePriceTableStatusResponse>>;
    public priceTableUpdatePriceTableStatusPost(body?: CoreModelsMasterDataPriceTableUpdatePriceTableStatusRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTableUpdatePriceTableStatusResponse>('post',`${this.basePath}/PriceTable/UpdatePriceTableStatus`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTemplateCreateOrUpdatePriceTemplatePost(body?: CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse>;
    public priceTemplateCreateOrUpdatePriceTemplatePost(body?: CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse>>;
    public priceTemplateCreateOrUpdatePriceTemplatePost(body?: CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse>>;
    public priceTemplateCreateOrUpdatePriceTemplatePost(body?: CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTemplateCreateOrUpdatePriceTemplateResponse>('post',`${this.basePath}/PriceTemplate/CreateOrUpdatePriceTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTemplateDeletePriceTemplateDelete(body?: CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse>;
    public priceTemplateDeletePriceTemplateDelete(body?: CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse>>;
    public priceTemplateDeletePriceTemplateDelete(body?: CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse>>;
    public priceTemplateDeletePriceTemplateDelete(body?: CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTemplateDeleteDeletePriceTemplateResponse>('delete',`${this.basePath}/PriceTemplate/DeletePriceTemplate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTemplateGetPriceTemplateByConditionPost(body?: CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse>;
    public priceTemplateGetPriceTemplateByConditionPost(body?: CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse>>;
    public priceTemplateGetPriceTemplateByConditionPost(body?: CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse>>;
    public priceTemplateGetPriceTemplateByConditionPost(body?: CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTemplateGetPriceTemplateByConditionResponse>('post',`${this.basePath}/PriceTemplate/GetPriceTemplateByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceTemplateItemGetPriceTemplateItemByConditionPost(body?: CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse>;
    public priceTemplateItemGetPriceTemplateItemByConditionPost(body?: CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse>>;
    public priceTemplateItemGetPriceTemplateItemByConditionPost(body?: CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse>>;
    public priceTemplateItemGetPriceTemplateItemByConditionPost(body?: CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataPriceTemplateItemGetPriceTemplateItemByConditionResponse>('post',`${this.basePath}/PriceTemplateItem/GetPriceTemplateItemByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selfCreateOrUpdateSelfPost(body?: CoreModelsMasterDataSelfCreateOrUpdateSelfRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataSelfCreateOrUpdateSelfResponse>;
    public selfCreateOrUpdateSelfPost(body?: CoreModelsMasterDataSelfCreateOrUpdateSelfRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataSelfCreateOrUpdateSelfResponse>>;
    public selfCreateOrUpdateSelfPost(body?: CoreModelsMasterDataSelfCreateOrUpdateSelfRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataSelfCreateOrUpdateSelfResponse>>;
    public selfCreateOrUpdateSelfPost(body?: CoreModelsMasterDataSelfCreateOrUpdateSelfRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataSelfCreateOrUpdateSelfResponse>('post',`${this.basePath}/Self/CreateOrUpdateSelf`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selfDeleteSelfDelete(body?: CoreModelsMasterDataSelfDeleteDeleteSelfRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataSelfDeleteDeleteSelfResponse>;
    public selfDeleteSelfDelete(body?: CoreModelsMasterDataSelfDeleteDeleteSelfRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataSelfDeleteDeleteSelfResponse>>;
    public selfDeleteSelfDelete(body?: CoreModelsMasterDataSelfDeleteDeleteSelfRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataSelfDeleteDeleteSelfResponse>>;
    public selfDeleteSelfDelete(body?: CoreModelsMasterDataSelfDeleteDeleteSelfRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataSelfDeleteDeleteSelfResponse>('delete',`${this.basePath}/Self/DeleteSelf`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selfGetSelfByConditionPost(body?: CoreModelsMasterDataSelfGetSelfByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataSelfGetSelfByConditionResponse>;
    public selfGetSelfByConditionPost(body?: CoreModelsMasterDataSelfGetSelfByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataSelfGetSelfByConditionResponse>>;
    public selfGetSelfByConditionPost(body?: CoreModelsMasterDataSelfGetSelfByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataSelfGetSelfByConditionResponse>>;
    public selfGetSelfByConditionPost(body?: CoreModelsMasterDataSelfGetSelfByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataSelfGetSelfByConditionResponse>('post',`${this.basePath}/Self/GetSelfByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selfGetSelfInitPagePost(body?: CoreModelsMasterDataSelfInitPageGetSelfInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataSelfInitPageGetSelfInitPageResponse>;
    public selfGetSelfInitPagePost(body?: CoreModelsMasterDataSelfInitPageGetSelfInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataSelfInitPageGetSelfInitPageResponse>>;
    public selfGetSelfInitPagePost(body?: CoreModelsMasterDataSelfInitPageGetSelfInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataSelfInitPageGetSelfInitPageResponse>>;
    public selfGetSelfInitPagePost(body?: CoreModelsMasterDataSelfInitPageGetSelfInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataSelfInitPageGetSelfInitPageResponse>('post',`${this.basePath}/Self/GetSelfInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCreateOrUpdateServicePost(body?: CoreModelsMasterDataServiceCreateOrUpdateServiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServiceCreateOrUpdateServiceResponse>;
    public serviceCreateOrUpdateServicePost(body?: CoreModelsMasterDataServiceCreateOrUpdateServiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServiceCreateOrUpdateServiceResponse>>;
    public serviceCreateOrUpdateServicePost(body?: CoreModelsMasterDataServiceCreateOrUpdateServiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServiceCreateOrUpdateServiceResponse>>;
    public serviceCreateOrUpdateServicePost(body?: CoreModelsMasterDataServiceCreateOrUpdateServiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServiceCreateOrUpdateServiceResponse>('post',`${this.basePath}/Service/CreateOrUpdateService`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceDeleteServiceDelete(body?: CoreModelsMasterDataServiceDeleteDeleteServiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServiceDeleteDeleteServiceResponse>;
    public serviceDeleteServiceDelete(body?: CoreModelsMasterDataServiceDeleteDeleteServiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServiceDeleteDeleteServiceResponse>>;
    public serviceDeleteServiceDelete(body?: CoreModelsMasterDataServiceDeleteDeleteServiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServiceDeleteDeleteServiceResponse>>;
    public serviceDeleteServiceDelete(body?: CoreModelsMasterDataServiceDeleteDeleteServiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServiceDeleteDeleteServiceResponse>('delete',`${this.basePath}/Service/DeleteService`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceGetServiceByConditionPost(body?: CoreModelsMasterDataServiceGetServiceByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServiceGetServiceByConditionResponse>;
    public serviceGetServiceByConditionPost(body?: CoreModelsMasterDataServiceGetServiceByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServiceGetServiceByConditionResponse>>;
    public serviceGetServiceByConditionPost(body?: CoreModelsMasterDataServiceGetServiceByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServiceGetServiceByConditionResponse>>;
    public serviceGetServiceByConditionPost(body?: CoreModelsMasterDataServiceGetServiceByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServiceGetServiceByConditionResponse>('post',`${this.basePath}/Service/GetServiceByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceInactivateServicePost(body?: CoreModelsMasterDataServiceInactivateServiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServiceInactivateServiceResponse>;
    public serviceInactivateServicePost(body?: CoreModelsMasterDataServiceInactivateServiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServiceInactivateServiceResponse>>;
    public serviceInactivateServicePost(body?: CoreModelsMasterDataServiceInactivateServiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServiceInactivateServiceResponse>>;
    public serviceInactivateServicePost(body?: CoreModelsMasterDataServiceInactivateServiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServiceInactivateServiceResponse>('post',`${this.basePath}/Service/InactivateService`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicePackageCreateOrUpdateServicePackagePost(body?: CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse>;
    public servicePackageCreateOrUpdateServicePackagePost(body?: CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse>>;
    public servicePackageCreateOrUpdateServicePackagePost(body?: CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse>>;
    public servicePackageCreateOrUpdateServicePackagePost(body?: CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServicePackageCreateOrUpdateServicePackageResponse>('post',`${this.basePath}/ServicePackage/CreateOrUpdateServicePackage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicePackageDeleteServicePackageDelete(body?: CoreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse>;
    public servicePackageDeleteServicePackageDelete(body?: CoreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse>>;
    public servicePackageDeleteServicePackageDelete(body?: CoreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse>>;
    public servicePackageDeleteServicePackageDelete(body?: CoreModelsMasterDataServicePackageDeleteDeleteServicePackageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServicePackageDeleteDeleteServicePackageResponse>('delete',`${this.basePath}/ServicePackage/DeleteServicePackage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicePackageGetServicePackageByConditionPost(body?: CoreModelsMasterDataServicePackageGetServicePackageByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServicePackageGetServicePackageByConditionResponse>;
    public servicePackageGetServicePackageByConditionPost(body?: CoreModelsMasterDataServicePackageGetServicePackageByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServicePackageGetServicePackageByConditionResponse>>;
    public servicePackageGetServicePackageByConditionPost(body?: CoreModelsMasterDataServicePackageGetServicePackageByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServicePackageGetServicePackageByConditionResponse>>;
    public servicePackageGetServicePackageByConditionPost(body?: CoreModelsMasterDataServicePackageGetServicePackageByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServicePackageGetServicePackageByConditionResponse>('post',`${this.basePath}/ServicePackage/GetServicePackageByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicePackageGetServicePackageInitPagePost(body?: CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse>;
    public servicePackageGetServicePackageInitPagePost(body?: CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse>>;
    public servicePackageGetServicePackageInitPagePost(body?: CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse>>;
    public servicePackageGetServicePackageInitPagePost(body?: CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataServicePackageInitPageGetServicePackageInitPageResponse>('post',`${this.basePath}/ServicePackage/GetServicePackageInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public specialtyGetSpecialtyByConditionPost(body?: CoreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse>;
    public specialtyGetSpecialtyByConditionPost(body?: CoreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse>>;
    public specialtyGetSpecialtyByConditionPost(body?: CoreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse>>;
    public specialtyGetSpecialtyByConditionPost(body?: CoreModelsMasterDataSpecialtyGetSpecialtyByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsMasterDataSpecialtyGetSpecialtyByConditionResponse>('post',`${this.basePath}/Specialty/GetSpecialtyByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webServiceInfoGetEndpointListGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CoreModelsWebServiceBaseEndpointListResponse>>;
    public webServiceInfoGetEndpointListGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CoreModelsWebServiceBaseEndpointListResponse>>('get',`${this.basePath}/WebServiceInfo/GetEndpointList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
