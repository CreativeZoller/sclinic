/**
 * InvoiceManagementController
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest } from '../model/coreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest';
import { CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse } from '../model/coreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse';
import { CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest } from '../model/coreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest';
import { CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse } from '../model/coreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse';
import { CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest } from '../model/coreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest';
import { CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse } from '../model/coreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse';
import { CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest } from '../model/coreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest';
import { CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse } from '../model/coreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse';
import { CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest } from '../model/coreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest';
import { CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse } from '../model/coreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse';
import { CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest } from '../model/coreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest';
import { CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse } from '../model/coreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse';
import { CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest } from '../model/coreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest';
import { CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse } from '../model/coreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse';
import { CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest } from '../model/coreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest';
import { CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse } from '../model/coreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse';
import { CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest } from '../model/coreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest';
import { CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse } from '../model/coreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse';
import { CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest } from '../model/coreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest';
import { CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse } from '../model/coreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse';
import { CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest } from '../model/coreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest';
import { CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse } from '../model/coreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse';
import { CoreModelsWebServiceBaseEndpointListResponse } from '../model/coreModelsWebServiceBaseEndpointListResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InvoiceManagementService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse>>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse>>;
    public auditLogGetAuditLogsByConditionPost(body?: CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementAuditLogGetInvoiceManagementAuditLogsByConditionResponse>('post',`${this.basePath}/AuditLog/GetAuditLogsByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dEEPERPMessageGetDEEPERPMessageByConditionPost(body?: CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse>;
    public dEEPERPMessageGetDEEPERPMessageByConditionPost(body?: CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse>>;
    public dEEPERPMessageGetDEEPERPMessageByConditionPost(body?: CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse>>;
    public dEEPERPMessageGetDEEPERPMessageByConditionPost(body?: CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementDEEPERPMessageGetDEEPERPMessageByConditionResponse>('post',`${this.basePath}/DEEPERPMessage/GetDEEPERPMessageByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initPageGetInvoiceInitPagePost(body?: CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse>;
    public initPageGetInvoiceInitPagePost(body?: CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse>>;
    public initPageGetInvoiceInitPagePost(body?: CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse>>;
    public initPageGetInvoiceInitPagePost(body?: CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementInvoiceInitPageGetInvoiceInitPageResponse>('post',`${this.basePath}/InitPage/GetInvoiceInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceCancelInvoicePost(body?: CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse>;
    public invoiceCancelInvoicePost(body?: CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse>>;
    public invoiceCancelInvoicePost(body?: CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse>>;
    public invoiceCancelInvoicePost(body?: CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementCancelInvoiceCancelInvoiceResponse>('post',`${this.basePath}/Invoice/CancelInvoice`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceCheckInvoiceBalancePost(body?: CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse>;
    public invoiceCheckInvoiceBalancePost(body?: CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse>>;
    public invoiceCheckInvoiceBalancePost(body?: CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse>>;
    public invoiceCheckInvoiceBalancePost(body?: CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementCheckInvoiceBalanceCheckInvoiceBalanceResponse>('post',`${this.basePath}/Invoice/CheckInvoiceBalance`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceGenerateInvoiceJobPost(body?: CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse>;
    public invoiceGenerateInvoiceJobPost(body?: CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse>>;
    public invoiceGenerateInvoiceJobPost(body?: CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse>>;
    public invoiceGenerateInvoiceJobPost(body?: CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementGenerateInvoiceJobGenerateInvoiceJobResponse>('post',`${this.basePath}/Invoice/GenerateInvoiceJob`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceGenerateInvoicePost(body?: CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse>;
    public invoiceGenerateInvoicePost(body?: CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse>>;
    public invoiceGenerateInvoicePost(body?: CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse>>;
    public invoiceGenerateInvoicePost(body?: CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementGenerateInvoiceGenerateInvoiceResponse>('post',`${this.basePath}/Invoice/GenerateInvoice`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceGetInvoiceByConditionPost(body?: CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse>;
    public invoiceGetInvoiceByConditionPost(body?: CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse>>;
    public invoiceGetInvoiceByConditionPost(body?: CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse>>;
    public invoiceGetInvoiceByConditionPost(body?: CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementInvoiceGetInvoiceByConditionResponse>('post',`${this.basePath}/Invoice/GetInvoiceByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceGetInvoiceDocumentPost(body?: CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse>;
    public invoiceGetInvoiceDocumentPost(body?: CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse>>;
    public invoiceGetInvoiceDocumentPost(body?: CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse>>;
    public invoiceGetInvoiceDocumentPost(body?: CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementGetInvoiceDocumentGetInvoiceDocumentResponse>('post',`${this.basePath}/Invoice/GetInvoiceDocument`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceGetUnpaidInvoicesPost(body?: CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse>;
    public invoiceGetUnpaidInvoicesPost(body?: CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse>>;
    public invoiceGetUnpaidInvoicesPost(body?: CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse>>;
    public invoiceGetUnpaidInvoicesPost(body?: CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementInvoiceGetUnpaidInvoicesResponse>('post',`${this.basePath}/Invoice/GetUnpaidInvoices`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceInvoiceCreationPost(body?: CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse>;
    public invoiceInvoiceCreationPost(body?: CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse>>;
    public invoiceInvoiceCreationPost(body?: CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse>>;
    public invoiceInvoiceCreationPost(body?: CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsInvoiceManagementInvoiceCreationJobCreateInvoiceResponse>('post',`${this.basePath}/Invoice/InvoiceCreation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param T 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceManagementGetEnumGet(T?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public invoiceManagementGetEnumGet(T?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public invoiceManagementGetEnumGet(T?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public invoiceManagementGetEnumGet(T?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (T !== undefined && T !== null) {
            queryParameters = queryParameters.set('T', <any>T);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<any>>('get',`${this.basePath}/InvoiceManagement/GetEnum`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invoiceManagementPingGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public invoiceManagementPingGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public invoiceManagementPingGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public invoiceManagementPingGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/InvoiceManagement/Ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webServiceInfoGetEndpointListGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CoreModelsWebServiceBaseEndpointListResponse>>;
    public webServiceInfoGetEndpointListGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CoreModelsWebServiceBaseEndpointListResponse>>('get',`${this.basePath}/WebServiceInfo/GetEndpointList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
