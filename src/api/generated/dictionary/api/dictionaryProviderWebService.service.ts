/**
 * DictionaryProviderWebService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CoreModelsDTOsAdminExportEndpointsResponse } from '../model/coreModelsDTOsAdminExportEndpointsResponse';
import { CoreModelsDictionaryAdminExportDictionaryEndpointsRequest } from '../model/coreModelsDictionaryAdminExportDictionaryEndpointsRequest';
import { CoreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest } from '../model/coreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest';
import { CoreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse } from '../model/coreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse';
import { CoreModelsDictionaryDCCityCreateOrUpdateDCCityRequest } from '../model/coreModelsDictionaryDCCityCreateOrUpdateDCCityRequest';
import { CoreModelsDictionaryDCCityCreateOrUpdateDCCityResponse } from '../model/coreModelsDictionaryDCCityCreateOrUpdateDCCityResponse';
import { CoreModelsDictionaryDCCityDeleteDCCityReponse } from '../model/coreModelsDictionaryDCCityDeleteDCCityReponse';
import { CoreModelsDictionaryDCCityDeleteDCCityRequest } from '../model/coreModelsDictionaryDCCityDeleteDCCityRequest';
import { CoreModelsDictionaryDCCityGetDCCitiesByConditionRequest } from '../model/coreModelsDictionaryDCCityGetDCCitiesByConditionRequest';
import { CoreModelsDictionaryDCCityGetDCCitiesByConditionResponse } from '../model/coreModelsDictionaryDCCityGetDCCitiesByConditionResponse';
import { CoreModelsDictionaryDCCityGetDCCityInitPageRequest } from '../model/coreModelsDictionaryDCCityGetDCCityInitPageRequest';
import { CoreModelsDictionaryDCCityGetDCCityInitPageResponse } from '../model/coreModelsDictionaryDCCityGetDCCityInitPageResponse';
import { CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest } from '../model/coreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest';
import { CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse } from '../model/coreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse';
import { CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest } from '../model/coreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest';
import { CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse } from '../model/coreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse';
import { CoreModelsDictionaryGetDCTableDTOListRequest } from '../model/coreModelsDictionaryGetDCTableDTOListRequest';
import { CoreModelsDictionaryGetDCTableDTOListResponse } from '../model/coreModelsDictionaryGetDCTableDTOListResponse';
import { CoreModelsDictionaryGetDCTableDTORequest } from '../model/coreModelsDictionaryGetDCTableDTORequest';
import { CoreModelsDictionaryGetDCTableNameListRequest } from '../model/coreModelsDictionaryGetDCTableNameListRequest';
import { CoreModelsDictionaryGetDCTableNameListResponse } from '../model/coreModelsDictionaryGetDCTableNameListResponse';
import { CoreModelsDictionaryGetDCTableResponse } from '../model/coreModelsDictionaryGetDCTableResponse';
import { CoreModelsWebServiceBaseEndpointListResponse } from '../model/coreModelsWebServiceBaseEndpointListResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DictionaryProviderWebServiceService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminExportDictionaryEndpointsPost(body?: CoreModelsDictionaryAdminExportDictionaryEndpointsRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDTOsAdminExportEndpointsResponse>;
    public adminExportDictionaryEndpointsPost(body?: CoreModelsDictionaryAdminExportDictionaryEndpointsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDTOsAdminExportEndpointsResponse>>;
    public adminExportDictionaryEndpointsPost(body?: CoreModelsDictionaryAdminExportDictionaryEndpointsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDTOsAdminExportEndpointsResponse>>;
    public adminExportDictionaryEndpointsPost(body?: CoreModelsDictionaryAdminExportDictionaryEndpointsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDTOsAdminExportEndpointsResponse>('post',`${this.basePath}/Admin/ExportDictionaryEndpoints`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cityCreateOrUpdateDCCityPost(body?: CoreModelsDictionaryDCCityCreateOrUpdateDCCityRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCCityCreateOrUpdateDCCityResponse>;
    public cityCreateOrUpdateDCCityPost(body?: CoreModelsDictionaryDCCityCreateOrUpdateDCCityRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCCityCreateOrUpdateDCCityResponse>>;
    public cityCreateOrUpdateDCCityPost(body?: CoreModelsDictionaryDCCityCreateOrUpdateDCCityRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCCityCreateOrUpdateDCCityResponse>>;
    public cityCreateOrUpdateDCCityPost(body?: CoreModelsDictionaryDCCityCreateOrUpdateDCCityRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCCityCreateOrUpdateDCCityResponse>('post',`${this.basePath}/City/CreateOrUpdateDC_City`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cityDeleteDCCityDelete(body?: CoreModelsDictionaryDCCityDeleteDCCityRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCCityDeleteDCCityReponse>;
    public cityDeleteDCCityDelete(body?: CoreModelsDictionaryDCCityDeleteDCCityRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCCityDeleteDCCityReponse>>;
    public cityDeleteDCCityDelete(body?: CoreModelsDictionaryDCCityDeleteDCCityRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCCityDeleteDCCityReponse>>;
    public cityDeleteDCCityDelete(body?: CoreModelsDictionaryDCCityDeleteDCCityRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCCityDeleteDCCityReponse>('delete',`${this.basePath}/City/DeleteDC_City`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cityGetDCCitiesByConditionPost(body?: CoreModelsDictionaryDCCityGetDCCitiesByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCCityGetDCCitiesByConditionResponse>;
    public cityGetDCCitiesByConditionPost(body?: CoreModelsDictionaryDCCityGetDCCitiesByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCCityGetDCCitiesByConditionResponse>>;
    public cityGetDCCitiesByConditionPost(body?: CoreModelsDictionaryDCCityGetDCCitiesByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCCityGetDCCitiesByConditionResponse>>;
    public cityGetDCCitiesByConditionPost(body?: CoreModelsDictionaryDCCityGetDCCitiesByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCCityGetDCCitiesByConditionResponse>('post',`${this.basePath}/City/GetDC_CitiesByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cityGetDCCityInitPagePost(body?: CoreModelsDictionaryDCCityGetDCCityInitPageRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCCityGetDCCityInitPageResponse>;
    public cityGetDCCityInitPagePost(body?: CoreModelsDictionaryDCCityGetDCCityInitPageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCCityGetDCCityInitPageResponse>>;
    public cityGetDCCityInitPagePost(body?: CoreModelsDictionaryDCCityGetDCCityInitPageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCCityGetDCCityInitPageResponse>>;
    public cityGetDCCityInitPagePost(body?: CoreModelsDictionaryDCCityGetDCCityInitPageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCCityGetDCCityInitPageResponse>('post',`${this.basePath}/City/GetDC_CityInitPage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dCCreateOrUpdateDictionaryEntriesPost(body?: CoreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse>;
    public dCCreateOrUpdateDictionaryEntriesPost(body?: CoreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse>>;
    public dCCreateOrUpdateDictionaryEntriesPost(body?: CoreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse>>;
    public dCCreateOrUpdateDictionaryEntriesPost(body?: CoreModelsDictionaryCreateOrUpdateDictionaryEntriesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryCreateOrUpdateDictionaryEntriesResponse>('post',`${this.basePath}/DC/CreateOrUpdateDictionaryEntries`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dCGetDCTableDTOListPost(body?: CoreModelsDictionaryGetDCTableDTOListRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryGetDCTableDTOListResponse>;
    public dCGetDCTableDTOListPost(body?: CoreModelsDictionaryGetDCTableDTOListRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryGetDCTableDTOListResponse>>;
    public dCGetDCTableDTOListPost(body?: CoreModelsDictionaryGetDCTableDTOListRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryGetDCTableDTOListResponse>>;
    public dCGetDCTableDTOListPost(body?: CoreModelsDictionaryGetDCTableDTOListRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryGetDCTableDTOListResponse>('post',`${this.basePath}/DC/GetDCTableDTOList`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dCGetDCTableDTOPost(body?: CoreModelsDictionaryGetDCTableDTORequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryGetDCTableResponse>;
    public dCGetDCTableDTOPost(body?: CoreModelsDictionaryGetDCTableDTORequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryGetDCTableResponse>>;
    public dCGetDCTableDTOPost(body?: CoreModelsDictionaryGetDCTableDTORequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryGetDCTableResponse>>;
    public dCGetDCTableDTOPost(body?: CoreModelsDictionaryGetDCTableDTORequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryGetDCTableResponse>('post',`${this.basePath}/DC/GetDCTableDTO`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dCGetDCTableNameListPost(body?: CoreModelsDictionaryGetDCTableNameListRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryGetDCTableNameListResponse>;
    public dCGetDCTableNameListPost(body?: CoreModelsDictionaryGetDCTableNameListRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryGetDCTableNameListResponse>>;
    public dCGetDCTableNameListPost(body?: CoreModelsDictionaryGetDCTableNameListRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryGetDCTableNameListResponse>>;
    public dCGetDCTableNameListPost(body?: CoreModelsDictionaryGetDCTableNameListRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryGetDCTableNameListResponse>('post',`${this.basePath}/DC/GetDCTableNameList`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dictionaryCategoryGetDCDictionaryCategoryByConditionPost(body?: CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse>;
    public dictionaryCategoryGetDCDictionaryCategoryByConditionPost(body?: CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse>>;
    public dictionaryCategoryGetDCDictionaryCategoryByConditionPost(body?: CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse>>;
    public dictionaryCategoryGetDCDictionaryCategoryByConditionPost(body?: CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCDictionaryCategoryGetDCDictionaryCategoryByConditionResponse>('post',`${this.basePath}/DictionaryCategory/GetDC_DictionaryCategoryByCondition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dictionaryCategoryUpdateDCDictionaryCategoryPost(body?: CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest, observe?: 'body', reportProgress?: boolean): Observable<CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse>;
    public dictionaryCategoryUpdateDCDictionaryCategoryPost(body?: CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse>>;
    public dictionaryCategoryUpdateDCDictionaryCategoryPost(body?: CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse>>;
    public dictionaryCategoryUpdateDCDictionaryCategoryPost(body?: CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CoreModelsDictionaryDCDictionaryCategoryUpdateDCDictionaryCategoryResponse>('post',`${this.basePath}/DictionaryCategory/UpdateDC_DictionaryCategory`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param T 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dictionaryProviderWebServiceGetEnumGet(T?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public dictionaryProviderWebServiceGetEnumGet(T?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public dictionaryProviderWebServiceGetEnumGet(T?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public dictionaryProviderWebServiceGetEnumGet(T?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (T !== undefined && T !== null) {
            queryParameters = queryParameters.set('T', <any>T);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<any>>('get',`${this.basePath}/DictionaryProviderWebService/GetEnum`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dictionaryProviderWebServicePingGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dictionaryProviderWebServicePingGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dictionaryProviderWebServicePingGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dictionaryProviderWebServicePingGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/DictionaryProviderWebService/Ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webServiceInfoGetEndpointListGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CoreModelsWebServiceBaseEndpointListResponse>>;
    public webServiceInfoGetEndpointListGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CoreModelsWebServiceBaseEndpointListResponse>>>;
    public webServiceInfoGetEndpointListGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CoreModelsWebServiceBaseEndpointListResponse>>('get',`${this.basePath}/WebServiceInfo/GetEndpointList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
